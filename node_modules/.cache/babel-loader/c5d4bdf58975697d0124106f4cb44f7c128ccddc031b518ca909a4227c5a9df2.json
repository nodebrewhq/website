{"ast":null,"code":"/**\n * A point in the 2d plane\n */\nexport const point = (x, y) => ({\n  x,\n  y,\n  distance(p1) {\n    return Math.sqrt(Math.pow(this.x - p1.x, 2) + Math.pow(this.y - p1.y, 2));\n  },\n  // vector addition in 2d plane\n  add(p1) {\n    return point(this.x + p1.x, this.y + p1.y);\n  },\n  // vector subtraction in 2d\n  // returns p0 - p1\n  subtract(p1) {\n    return point(this.x - p1.x, this.y - p1.y);\n  },\n  // multiply a 2d point by a scalar\n  scalarMult(n) {\n    return point(this.x * n, this.y * n);\n  },\n  scalarDivide(n) {\n    if (n === 0) {\n      throw new Error(\"Division by 0 error\");\n    }\n    return point(this.x / n, this.y / n);\n  },\n  equals(p1) {\n    return this.x === p1.x && this.y === p1.y;\n  }\n});\n/**\n * A circle in the 2d plane\n */\nexport const circle = (center, radius) => ({\n  center,\n  radius,\n  hasIntersection(circle1) {\n    const P0 = this.center;\n    const P1 = circle1.center;\n    const r0 = this.radius;\n    const r1 = circle1.radius;\n    const d = P0.distance(P1);\n    if (d > r0 + r1) {\n      return false; // separate circles\n    }\n    if (d < Math.abs(r0 - r1)) {\n      return false; // one circle contains another\n    }\n    return true;\n  },\n  equals(circle1) {\n    const P0 = this.center;\n    const P1 = circle1.center;\n    const r0 = this.radius;\n    const r1 = circle1.radius;\n    return r0 === r1 && P0.equals(P1);\n  },\n  // Source: http://paulbourke.net/geometry/circlesphere/\n  // \"Intersection of two circles\" by Paul Bourke\n  // Left-most point is returned as 0th element of array\n  // Right-most point is returned as 1st elemennt of array\n  intersection(circle1) {\n    // eslint-disable-line max-statements\n    const P0 = this.center;\n    const P1 = circle1.center;\n    const r0 = this.radius;\n    const r1 = circle1.radius;\n    const d = P0.distance(P1);\n    if (!this.hasIntersection(circle1) || this.equals(circle1)) {\n      return [];\n    }\n    const a = (Math.pow(r0, 2) - Math.pow(r1, 2) + Math.pow(d, 2)) / (2 * d);\n    const h = Math.sqrt(Math.pow(r0, 2) - Math.pow(a, 2));\n    const P2 = P0.add(P1.subtract(P0).scalarMult(a).scalarDivide(d));\n    const {\n      x: x0,\n      y: y0\n    } = P0;\n    const {\n      x: x1,\n      y: y1\n    } = P1;\n    const {\n      x: x2,\n      y: y2\n    } = P2;\n    const P3s = [point(x2 - h * (y1 - y0) / d, y2 + h * (x1 - x0) / d), point(x2 + h * (y1 - y0) / d, y2 - h * (x1 - x0) / d)];\n    P3s.sort((Point1, Point2) => Point1.x - Point2.x);\n    return P3s;\n  },\n  solveX(y) {\n    const sqrt = Math.sqrt(Math.pow(this.radius, 2) - Math.pow(y - this.center.y, 2));\n    return [this.center.x - sqrt, this.center.x + sqrt];\n  },\n  solveY(x) {\n    const sqrt = Math.sqrt(Math.pow(this.radius, 2) - Math.pow(x - this.center.x, 2));\n    return [this.center.y - sqrt, this.center.y + sqrt];\n  }\n});","map":{"version":3,"names":["point","x","y","distance","p1","Math","sqrt","pow","add","subtract","scalarMult","n","scalarDivide","Error","equals","circle","center","radius","hasIntersection","circle1","P0","P1","r0","r1","d","abs","intersection","a","h","P2","x0","y0","x1","y1","x2","y2","P3s","sort","Point1","Point2","solveX","solveY"],"sources":["/Users/anjalichaturvedi/GitHub/brew-bridge-dashboard/website/node_modules/victory-bar/es/geometry-helper-methods.js"],"sourcesContent":["/**\n * A point in the 2d plane\n */\nexport const point = (x, y) => ({\n  x,\n  y,\n  distance(p1) {\n    return Math.sqrt(Math.pow(this.x - p1.x, 2) + Math.pow(this.y - p1.y, 2));\n  },\n  // vector addition in 2d plane\n  add(p1) {\n    return point(this.x + p1.x, this.y + p1.y);\n  },\n  // vector subtraction in 2d\n  // returns p0 - p1\n  subtract(p1) {\n    return point(this.x - p1.x, this.y - p1.y);\n  },\n  // multiply a 2d point by a scalar\n  scalarMult(n) {\n    return point(this.x * n, this.y * n);\n  },\n  scalarDivide(n) {\n    if (n === 0) {\n      throw new Error(\"Division by 0 error\");\n    }\n    return point(this.x / n, this.y / n);\n  },\n  equals(p1) {\n    return this.x === p1.x && this.y === p1.y;\n  }\n});\n/**\n * A circle in the 2d plane\n */\nexport const circle = (center, radius) => ({\n  center,\n  radius,\n  hasIntersection(circle1) {\n    const P0 = this.center;\n    const P1 = circle1.center;\n    const r0 = this.radius;\n    const r1 = circle1.radius;\n    const d = P0.distance(P1);\n    if (d > r0 + r1) {\n      return false; // separate circles\n    }\n    if (d < Math.abs(r0 - r1)) {\n      return false; // one circle contains another\n    }\n    return true;\n  },\n  equals(circle1) {\n    const P0 = this.center;\n    const P1 = circle1.center;\n    const r0 = this.radius;\n    const r1 = circle1.radius;\n    return r0 === r1 && P0.equals(P1);\n  },\n  // Source: http://paulbourke.net/geometry/circlesphere/\n  // \"Intersection of two circles\" by Paul Bourke\n  // Left-most point is returned as 0th element of array\n  // Right-most point is returned as 1st elemennt of array\n  intersection(circle1) {\n    // eslint-disable-line max-statements\n    const P0 = this.center;\n    const P1 = circle1.center;\n    const r0 = this.radius;\n    const r1 = circle1.radius;\n    const d = P0.distance(P1);\n    if (!this.hasIntersection(circle1) || this.equals(circle1)) {\n      return [];\n    }\n    const a = (Math.pow(r0, 2) - Math.pow(r1, 2) + Math.pow(d, 2)) / (2 * d);\n    const h = Math.sqrt(Math.pow(r0, 2) - Math.pow(a, 2));\n    const P2 = P0.add(P1.subtract(P0).scalarMult(a).scalarDivide(d));\n    const {\n      x: x0,\n      y: y0\n    } = P0;\n    const {\n      x: x1,\n      y: y1\n    } = P1;\n    const {\n      x: x2,\n      y: y2\n    } = P2;\n    const P3s = [point(x2 - h * (y1 - y0) / d, y2 + h * (x1 - x0) / d), point(x2 + h * (y1 - y0) / d, y2 - h * (x1 - x0) / d)];\n    P3s.sort((Point1, Point2) => Point1.x - Point2.x);\n    return P3s;\n  },\n  solveX(y) {\n    const sqrt = Math.sqrt(Math.pow(this.radius, 2) - Math.pow(y - this.center.y, 2));\n    return [this.center.x - sqrt, this.center.x + sqrt];\n  },\n  solveY(x) {\n    const sqrt = Math.sqrt(Math.pow(this.radius, 2) - Math.pow(x - this.center.x, 2));\n    return [this.center.y - sqrt, this.center.y + sqrt];\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}