{"ast":null,"code":"import _defaults from \"lodash/defaults\";\nimport React from \"react\";\nimport * as Collection from \"../collection\";\nimport * as Transitions from \"../transitions\";\nconst INITIAL_STATE = {\n  nodesShouldLoad: false,\n  nodesDoneLoad: false,\n  animating: true\n};\nexport const useAnimationState = function (initialState) {\n  if (initialState === void 0) {\n    initialState = INITIAL_STATE;\n  }\n  const [state, _setState] = React.useState(initialState);\n\n  // This allows us to use a state object and maintain the same API as this.setState\n  const setState = React.useCallback(newState => {\n    _setState(oldState => ({\n      ...oldState,\n      ...newState\n    }));\n  }, [_setState]);\n\n  // This is a copy of Wrapper.getAnimationProps\n  const getAnimationProps = React.useCallback((props, child, index) => {\n    if (!props?.animate) {\n      return child.props.animate;\n    }\n    const getFilteredState = () => {\n      let childrenTransitions = state && state.childrenTransitions;\n      childrenTransitions = Collection.isArrayOfArrays(childrenTransitions) ? childrenTransitions[index] : childrenTransitions;\n      return _defaults({\n        childrenTransitions\n      }, state);\n    };\n    let getTransitions = props.animate && props.animate.getTransitions;\n    const filteredState = getFilteredState();\n    const parentState = props.animate && props.animate.parentState || filteredState;\n    if (!getTransitions) {\n      const getTransitionProps = Transitions.getTransitionPropsFactory(props, filteredState, newState => setState(newState));\n      getTransitions = childComponent => getTransitionProps(childComponent, index);\n    }\n    return _defaults({\n      getTransitions,\n      parentState\n    }, props.animate, child.props.animate);\n  }, [state, setState]);\n\n  // This is a copy of Wrapper.setAnimationState\n  const setAnimationState = React.useCallback((props, nextProps) => {\n    if (!props?.animate) {\n      return;\n    }\n    if (props.animate.parentState) {\n      const nodesWillExit = props.animate.parentState.nodesWillExit;\n      const oldProps = nodesWillExit ? props : null;\n      const newState = _defaults({\n        oldProps,\n        nextProps\n      }, props.animate.parentState);\n      setState(newState);\n    } else {\n      const oldChildren = React.Children.toArray(props.children);\n      const nextChildren = React.Children.toArray(nextProps.children);\n      const isContinuous = child => {\n        const check = c => c.type && c.type.continuous;\n        return Array.isArray(child) ? child.some(check) : check(child);\n      };\n      const continuous = !props.polar && oldChildren.some(child => {\n        return isContinuous(child) || child?.props?.children && isContinuous(child.props.children);\n      });\n      const {\n        nodesWillExit,\n        nodesWillEnter,\n        childrenTransitions,\n        nodesShouldEnter\n      } = Transitions.getInitialTransitionState(oldChildren, nextChildren);\n      setState({\n        nodesWillExit,\n        nodesWillEnter,\n        nodesShouldEnter,\n        childrenTransitions: Collection.isArrayOfArrays(childrenTransitions) ? childrenTransitions[0] : childrenTransitions,\n        oldProps: nodesWillExit ? props : undefined,\n        nextProps,\n        continuous\n      });\n    }\n  }, [setState]);\n  const getProps = React.useCallback(initialProps => {\n    return state && state.nodesWillExit ? state.oldProps || initialProps : initialProps;\n  }, [state]);\n  return {\n    state,\n    setState,\n    getAnimationProps,\n    setAnimationState,\n    getProps\n  };\n};","map":{"version":3,"names":["_defaults","React","Collection","Transitions","INITIAL_STATE","nodesShouldLoad","nodesDoneLoad","animating","useAnimationState","initialState","state","_setState","useState","setState","useCallback","newState","oldState","getAnimationProps","props","child","index","animate","getFilteredState","childrenTransitions","isArrayOfArrays","getTransitions","filteredState","parentState","getTransitionProps","getTransitionPropsFactory","childComponent","setAnimationState","nextProps","nodesWillExit","oldProps","oldChildren","Children","toArray","children","nextChildren","isContinuous","check","c","type","continuous","Array","isArray","some","polar","nodesWillEnter","nodesShouldEnter","getInitialTransitionState","undefined","getProps","initialProps"],"sources":["/Users/anjalichaturvedi/GitHub/brew-bridge-dashboard/website/node_modules/victory-core/es/victory-util/hooks/use-animation-state.js"],"sourcesContent":["import _defaults from \"lodash/defaults\";\nimport React from \"react\";\nimport * as Collection from \"../collection\";\nimport * as Transitions from \"../transitions\";\nconst INITIAL_STATE = {\n  nodesShouldLoad: false,\n  nodesDoneLoad: false,\n  animating: true\n};\nexport const useAnimationState = function (initialState) {\n  if (initialState === void 0) {\n    initialState = INITIAL_STATE;\n  }\n  const [state, _setState] = React.useState(initialState);\n\n  // This allows us to use a state object and maintain the same API as this.setState\n  const setState = React.useCallback(newState => {\n    _setState(oldState => ({\n      ...oldState,\n      ...newState\n    }));\n  }, [_setState]);\n\n  // This is a copy of Wrapper.getAnimationProps\n  const getAnimationProps = React.useCallback((props, child, index) => {\n    if (!props?.animate) {\n      return child.props.animate;\n    }\n    const getFilteredState = () => {\n      let childrenTransitions = state && state.childrenTransitions;\n      childrenTransitions = Collection.isArrayOfArrays(childrenTransitions) ? childrenTransitions[index] : childrenTransitions;\n      return _defaults({\n        childrenTransitions\n      }, state);\n    };\n    let getTransitions = props.animate && props.animate.getTransitions;\n    const filteredState = getFilteredState();\n    const parentState = props.animate && props.animate.parentState || filteredState;\n    if (!getTransitions) {\n      const getTransitionProps = Transitions.getTransitionPropsFactory(props, filteredState, newState => setState(newState));\n      getTransitions = childComponent => getTransitionProps(childComponent, index);\n    }\n    return _defaults({\n      getTransitions,\n      parentState\n    }, props.animate, child.props.animate);\n  }, [state, setState]);\n\n  // This is a copy of Wrapper.setAnimationState\n  const setAnimationState = React.useCallback((props, nextProps) => {\n    if (!props?.animate) {\n      return;\n    }\n    if (props.animate.parentState) {\n      const nodesWillExit = props.animate.parentState.nodesWillExit;\n      const oldProps = nodesWillExit ? props : null;\n      const newState = _defaults({\n        oldProps,\n        nextProps\n      }, props.animate.parentState);\n      setState(newState);\n    } else {\n      const oldChildren = React.Children.toArray(props.children);\n      const nextChildren = React.Children.toArray(nextProps.children);\n      const isContinuous = child => {\n        const check = c => c.type && c.type.continuous;\n        return Array.isArray(child) ? child.some(check) : check(child);\n      };\n      const continuous = !props.polar && oldChildren.some(child => {\n        return isContinuous(child) || child?.props?.children && isContinuous(child.props.children);\n      });\n      const {\n        nodesWillExit,\n        nodesWillEnter,\n        childrenTransitions,\n        nodesShouldEnter\n      } = Transitions.getInitialTransitionState(oldChildren, nextChildren);\n      setState({\n        nodesWillExit,\n        nodesWillEnter,\n        nodesShouldEnter,\n        childrenTransitions: Collection.isArrayOfArrays(childrenTransitions) ? childrenTransitions[0] : childrenTransitions,\n        oldProps: nodesWillExit ? props : undefined,\n        nextProps,\n        continuous\n      });\n    }\n  }, [setState]);\n  const getProps = React.useCallback(initialProps => {\n    return state && state.nodesWillExit ? state.oldProps || initialProps : initialProps;\n  }, [state]);\n  return {\n    state,\n    setState,\n    getAnimationProps,\n    setAnimationState,\n    getProps\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}