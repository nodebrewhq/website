{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Functions related to dom operations.\n */\nimport { EventHandler } from './event-handler';\nimport { isNullOrUndefined, getValue, setValue, isObject, extend } from './util';\nvar SVG_REG = /^svg|^path|^g/;\n/**\n * Function to create Html element.\n *\n * @param {string} tagName - Name of the tag, id and class names.\n * @param {ElementProperties} properties - Object to set properties in the element.\n * @param {ElementProperties} properties.id - To set the id to the created element.\n * @param {ElementProperties} properties.className - To add classes to the element.\n * @param {ElementProperties} properties.innerHTML - To set the innerHTML to element.\n * @param {ElementProperties} properties.styles - To set the some custom styles to element.\n * @param {ElementProperties} properties.attrs - To set the attributes to element.\n * @returns {any} ?\n * @private\n */\nexport function createElement(tagName, properties) {\n  var element = SVG_REG.test(tagName) ? document.createElementNS('http://www.w3.org/2000/svg', tagName) : document.createElement(tagName);\n  if (typeof properties === 'undefined') {\n    return element;\n  }\n  element.innerHTML = properties.innerHTML ? properties.innerHTML : '';\n  if (properties.className !== undefined) {\n    element.className = properties.className;\n  }\n  if (properties.id !== undefined) {\n    element.id = properties.id;\n  }\n  if (properties.styles !== undefined) {\n    element.setAttribute('style', properties.styles);\n  }\n  if (properties.attrs !== undefined) {\n    attributes(element, properties.attrs);\n  }\n  return element;\n}\n/**\n * The function used to add the classes to array of elements\n *\n * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @returns {any} .\n * @private\n */\nexport function addClass(elements, classes) {\n  var classList = getClassList(classes);\n  var regExp = RegExp;\n  for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n    for (var _b = 0, classList_1 = classList; _b < classList_1.length; _b++) {\n      var className = classList_1[_b];\n      if (isObject(ele)) {\n        var curClass = getValue('attributes.className', ele);\n        if (isNullOrUndefined(curClass)) {\n          setValue('attributes.className', className, ele);\n        } else if (!new regExp('\\\\b' + className + '\\\\b', 'i').test(curClass)) {\n          setValue('attributes.className', curClass + ' ' + className, ele);\n        }\n      } else {\n        if (!ele.classList.contains(className)) {\n          ele.classList.add(className);\n        }\n      }\n    }\n  }\n  return elements;\n}\n/**\n * The function used to add the classes to array of elements\n *\n * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @returns {any} .\n * @private\n */\nexport function removeClass(elements, classes) {\n  var classList = getClassList(classes);\n  for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n    var flag = isObject(ele);\n    var canRemove = flag ? getValue('attributes.className', ele) : ele.className !== '';\n    if (canRemove) {\n      for (var _b = 0, classList_2 = classList; _b < classList_2.length; _b++) {\n        var className = classList_2[_b];\n        if (flag) {\n          var classes_1 = getValue('attributes.className', ele);\n          var classArr = classes_1.split(' ');\n          var index = classArr.indexOf(className);\n          if (index !== -1) {\n            classArr.splice(index, 1);\n          }\n          setValue('attributes.className', classArr.join(' '), ele);\n        } else {\n          ele.classList.remove(className);\n        }\n      }\n    }\n  }\n  return elements;\n}\n/**\n * The function used to get classlist.\n *\n * @param  {string | string[]} classes - An element the need to check visibility\n * @returns {string[]} ?\n * @private\n */\nfunction getClassList(classes) {\n  var classList = [];\n  if (typeof classes === 'string') {\n    classList.push(classes);\n  } else {\n    classList = classes;\n  }\n  return classList;\n}\n/**\n * The function used to check element is visible or not.\n *\n * @param  {Element|Node} element - An element the need to check visibility\n * @returns {boolean} ?\n * @private\n */\nexport function isVisible(element) {\n  var ele = element;\n  return ele.style.visibility === '' && ele.offsetWidth > 0;\n}\n/**\n * The function used to insert an array of elements into a first of the element.\n *\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.\n * @param  {Element} toElement - An element that is going to prepend.\n * @param {boolean} isEval - ?\n * @returns {Element[] | NodeList} ?\n * @private\n */\nexport function prepend(fromElements, toElement, isEval) {\n  var docFrag = document.createDocumentFragment();\n  for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n    docFrag.appendChild(ele);\n  }\n  toElement.insertBefore(docFrag, toElement.firstElementChild);\n  if (isEval) {\n    executeScript(toElement);\n  }\n  return fromElements;\n}\n/**\n * The function used to insert an array of elements into last of the element.\n *\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.\n * @param  {Element} toElement - An element that is going to prepend.\n * @param {boolean} isEval - ?\n * @returns {Element[] | NodeList} ?\n * @private\n */\nexport function append(fromElements, toElement, isEval) {\n  var docFrag = document.createDocumentFragment();\n  if (fromElements instanceof NodeList) {\n    while (fromElements.length > 0) {\n      docFrag.appendChild(fromElements[0]);\n    }\n  } else {\n    for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n      var ele = _a[_i];\n      docFrag.appendChild(ele);\n    }\n  }\n  toElement.appendChild(docFrag);\n  if (isEval) {\n    executeScript(toElement);\n  }\n  return fromElements;\n}\n/**\n * The function is used to evaluate script from Ajax request\n *\n * @param {Element} ele - An element is going to evaluate the script\n * @returns {void} ?\n */\nfunction executeScript(ele) {\n  var eleArray = ele.querySelectorAll('script');\n  eleArray.forEach(function (element) {\n    var script = document.createElement('script');\n    script.text = element.innerHTML;\n    document.head.appendChild(script);\n    detach(script);\n  });\n}\n/**\n * The function used to remove the element from parentnode\n *\n * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom\n * @returns {any} ?\n * @private\n */\nexport function detach(element) {\n  var parentNode = element.parentNode;\n  if (parentNode) {\n    return parentNode.removeChild(element);\n  }\n}\n/**\n * The function used to remove the element from Dom also clear the bounded events\n *\n * @param  {Element|Node|HTMLElement} element - An element remove from the Dom\n * @returns {void} ?\n * @private\n */\nexport function remove(element) {\n  var parentNode = element.parentNode;\n  EventHandler.clearEvents(element);\n  parentNode.removeChild(element);\n}\n/**\n * The function helps to set multiple attributes to an element\n *\n * @param  {Element|Node} element - An element that need to set attributes.\n * @param  {string} attributes - JSON Object that is going to as attributes.\n * @returns {Element} ?\n * @private\n */\nexport function attributes(element, attributes) {\n  var keys = Object.keys(attributes);\n  var ele = element;\n  for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n    var key = keys_1[_i];\n    if (isObject(ele)) {\n      var iKey = key;\n      if (key === 'tabindex') {\n        iKey = 'tabIndex';\n      }\n      ele.attributes[\"\" + iKey] = attributes[\"\" + key];\n    } else {\n      ele.setAttribute(key, attributes[\"\" + key]);\n    }\n  }\n  return ele;\n}\n/**\n * The function selects the element from giving context.\n *\n * @param  {string} selector - Selector string need fetch element\n * @param  {Document|Element} context - It is an optional type, That specifies a Dom context.\n * @param {boolean} needsVDOM ?\n * @returns {any} ?\n * @private\n */\nexport function select(selector, context, needsVDOM) {\n  if (context === void 0) {\n    context = document;\n  }\n  selector = querySelectId(selector);\n  return context.querySelector(selector);\n}\n/**\n * The function selects an array of element from the given context.\n *\n * @param  {string} selector - Selector string need fetch element\n * @param  {Document|Element} context - It is an optional type, That specifies a Dom context.\n * @param {boolean} needsVDOM ?\n * @returns {HTMLElement[]} ?\n * @private\n */\nexport function selectAll(selector, context, needsVDOM) {\n  if (context === void 0) {\n    context = document;\n  }\n  selector = querySelectId(selector);\n  var nodeList = context.querySelectorAll(selector);\n  return nodeList;\n}\n/**\n * The function selects an id of element from the given context.\n *\n * @param  {string} selector - Selector string need fetch element\n * @returns {string} ?\n * @private\n */\nfunction querySelectId(selector) {\n  var charRegex = /(!|\"|\\$|%|&|'|\\(|\\)|\\*|\\/|:|;|<|=|\\?|@|\\]|\\^|`|{|}|\\||\\+|~)/g;\n  if (selector.match(/#[0-9]/g) || selector.match(charRegex)) {\n    var idList = selector.split(',');\n    for (var i = 0; i < idList.length; i++) {\n      var list = idList[parseInt(i.toString(), 10)].split(' ');\n      for (var j = 0; j < list.length; j++) {\n        if (list[parseInt(j.toString(), 10)].indexOf('#') > -1) {\n          if (!list[parseInt(j.toString(), 10)].match(/\\[.*\\]/)) {\n            var splitId = list[parseInt(j.toString(), 10)].split('#');\n            if (splitId[1].match(/^\\d/) || splitId[1].match(charRegex)) {\n              var setId = list[parseInt(j.toString(), 10)].split('.');\n              setId[0] = setId[0].replace(/#/, '[id=\\'') + '\\']';\n              list[parseInt(j.toString(), 10)] = setId.join('.');\n            }\n          }\n        }\n      }\n      idList[parseInt(i.toString(), 10)] = list.join(' ');\n    }\n    return idList.join(',');\n  }\n  return selector;\n}\n/**\n * Returns single closest parent element based on class selector.\n *\n * @param  {Element} element - An element that need to find the closest element.\n * @param  {string} selector - A classSelector of closest element.\n * @returns {Element} ?\n * @private\n */\nexport function closest(element, selector) {\n  var el = element;\n  if (typeof el.closest === 'function') {\n    return el.closest(selector);\n  }\n  while (el && el.nodeType === 1) {\n    if (matches(el, selector)) {\n      return el;\n    }\n    el = el.parentNode;\n  }\n  return null;\n}\n/**\n * Returns all sibling elements of the given element.\n *\n * @param  {Element|Node} element - An element that need to get siblings.\n * @returns {Element[]} ?\n * @private\n */\nexport function siblings(element) {\n  var siblings = [];\n  var childNodes = Array.prototype.slice.call(element.parentNode.childNodes);\n  for (var _i = 0, childNodes_1 = childNodes; _i < childNodes_1.length; _i++) {\n    var curNode = childNodes_1[_i];\n    if (curNode.nodeType === Node.ELEMENT_NODE && element !== curNode) {\n      siblings.push(curNode);\n    }\n  }\n  return siblings;\n}\n/**\n * set the value if not exist. Otherwise set the existing value\n *\n * @param  {HTMLElement} element - An element to which we need to set value.\n * @param  {string} property - Property need to get or set.\n * @param  {string} value - value need to set.\n * @returns {string} ?\n * @private\n */\nexport function getAttributeOrDefault(element, property, value) {\n  var attrVal;\n  var isObj = isObject(element);\n  if (isObj) {\n    attrVal = getValue('attributes.' + property, element);\n  } else {\n    attrVal = element.getAttribute(property);\n  }\n  if (isNullOrUndefined(attrVal) && value) {\n    if (!isObj) {\n      element.setAttribute(property, value.toString());\n    } else {\n      element.attributes[\"\" + property] = value;\n    }\n    attrVal = value;\n  }\n  return attrVal;\n}\n/**\n * Set the style attributes to Html element.\n *\n * @param {HTMLElement} element - Element which we want to set attributes\n * @param {any} attrs - Set the given attributes to element\n * @returns {void} ?\n * @private\n */\nexport function setStyleAttribute(element, attrs) {\n  if (attrs !== undefined) {\n    Object.keys(attrs).forEach(function (key) {\n      element.style[\"\" + key] = attrs[\"\" + key];\n    });\n  }\n}\n/**\n * Method for add and remove classes to a dom element.\n *\n * @param {Element} element - Element for add and remove classes\n * @param {string[]} addClasses - List of classes need to be add to the element\n * @param {string[]} removeClasses - List of classes need to be remove from the element\n * @returns {void} ?\n * @private\n */\nexport function classList(element, addClasses, removeClasses) {\n  addClass([element], addClasses);\n  removeClass([element], removeClasses);\n}\n/**\n * Method to check whether the element matches the given selector.\n *\n * @param {Element} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @returns {void} ?\n * @private\n */\nexport function matches(element, selector) {\n  var matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;\n  if (matches) {\n    return matches.call(element, selector);\n  } else {\n    return [].indexOf.call(document.querySelectorAll(selector), element) !== -1;\n  }\n}\n/**\n * Method to get the html text from DOM.\n *\n * @param {HTMLElement} ele - Element to compare with the selector.\n * @param {string} innerHTML - String selector which element will satisfy.\n * @returns {void} ?\n * @private\n */\nexport function includeInnerHTML(ele, innerHTML) {\n  ele.innerHTML = innerHTML;\n}\n/**\n * Method to get the containsclass.\n *\n * @param {HTMLElement} ele - Element to compare with the selector.\n * @param {string} className - String selector which element will satisfy.\n * @returns {any} ?\n * @private\n */\nexport function containsClass(ele, className) {\n  if (isObject(ele)) {\n    var regExp = RegExp;\n    return new regExp('\\\\b' + className + '\\\\b', 'i').test(ele.attributes.className);\n  } else {\n    return ele.classList.contains(className);\n  }\n}\n/**\n * Method to check whether the element matches the given selector.\n *\n * @param {Object} element - Element to compare with the selector.\n * @param {boolean} deep ?\n * @returns {any} ?\n * @private\n */\nexport function cloneNode(element, deep) {\n  if (isObject(element)) {\n    if (deep) {\n      return extend({}, {}, element, true);\n    }\n  } else {\n    return element.cloneNode(deep);\n  }\n}","map":{"version":3,"names":["EventHandler","isNullOrUndefined","getValue","setValue","isObject","extend","SVG_REG","createElement","tagName","properties","element","test","document","createElementNS","innerHTML","className","undefined","id","styles","setAttribute","attrs","attributes","addClass","elements","classes","classList","getClassList","regExp","RegExp","_i","_a","length","ele","_b","classList_1","curClass","contains","add","removeClass","flag","canRemove","classList_2","classes_1","classArr","split","index","indexOf","splice","join","remove","push","isVisible","style","visibility","offsetWidth","prepend","fromElements","toElement","isEval","docFrag","createDocumentFragment","appendChild","insertBefore","firstElementChild","executeScript","append","NodeList","eleArray","querySelectorAll","forEach","script","text","head","detach","parentNode","removeChild","clearEvents","keys","Object","keys_1","key","iKey","select","selector","context","needsVDOM","querySelectId","querySelector","selectAll","nodeList","charRegex","match","idList","i","list","parseInt","toString","j","splitId","setId","replace","closest","el","nodeType","matches","siblings","childNodes","Array","prototype","slice","call","childNodes_1","curNode","Node","ELEMENT_NODE","getAttributeOrDefault","property","value","attrVal","isObj","getAttribute","setStyleAttribute","addClasses","removeClasses","msMatchesSelector","webkitMatchesSelector","includeInnerHTML","containsClass","cloneNode","deep"],"sources":["/Users/anjalichaturvedi/GitHub/brew-bridge-dashboard/website/node_modules/@syncfusion/ej2-base/src/dom.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Functions related to dom operations.\n */\nimport { EventHandler } from './event-handler';\nimport { isNullOrUndefined, getValue, setValue, isObject, extend } from './util';\nvar SVG_REG = /^svg|^path|^g/;\n/**\n * Function to create Html element.\n *\n * @param {string} tagName - Name of the tag, id and class names.\n * @param {ElementProperties} properties - Object to set properties in the element.\n * @param {ElementProperties} properties.id - To set the id to the created element.\n * @param {ElementProperties} properties.className - To add classes to the element.\n * @param {ElementProperties} properties.innerHTML - To set the innerHTML to element.\n * @param {ElementProperties} properties.styles - To set the some custom styles to element.\n * @param {ElementProperties} properties.attrs - To set the attributes to element.\n * @returns {any} ?\n * @private\n */\nexport function createElement(tagName, properties) {\n    var element = (SVG_REG.test(tagName) ? document.createElementNS('http://www.w3.org/2000/svg', tagName) : document.createElement(tagName));\n    if (typeof (properties) === 'undefined') {\n        return element;\n    }\n    element.innerHTML = (properties.innerHTML ? properties.innerHTML : '');\n    if (properties.className !== undefined) {\n        element.className = properties.className;\n    }\n    if (properties.id !== undefined) {\n        element.id = properties.id;\n    }\n    if (properties.styles !== undefined) {\n        element.setAttribute('style', properties.styles);\n    }\n    if (properties.attrs !== undefined) {\n        attributes(element, properties.attrs);\n    }\n    return element;\n}\n/**\n * The function used to add the classes to array of elements\n *\n * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @returns {any} .\n * @private\n */\nexport function addClass(elements, classes) {\n    var classList = getClassList(classes);\n    var regExp = RegExp;\n    for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n        var ele = _a[_i];\n        for (var _b = 0, classList_1 = classList; _b < classList_1.length; _b++) {\n            var className = classList_1[_b];\n            if (isObject(ele)) {\n                var curClass = getValue('attributes.className', ele);\n                if (isNullOrUndefined(curClass)) {\n                    setValue('attributes.className', className, ele);\n                }\n                else if (!new regExp('\\\\b' + className + '\\\\b', 'i').test(curClass)) {\n                    setValue('attributes.className', curClass + ' ' + className, ele);\n                }\n            }\n            else {\n                if (!ele.classList.contains(className)) {\n                    ele.classList.add(className);\n                }\n            }\n        }\n    }\n    return elements;\n}\n/**\n * The function used to add the classes to array of elements\n *\n * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @returns {any} .\n * @private\n */\nexport function removeClass(elements, classes) {\n    var classList = getClassList(classes);\n    for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n        var ele = _a[_i];\n        var flag = isObject(ele);\n        var canRemove = flag ? getValue('attributes.className', ele) : ele.className !== '';\n        if (canRemove) {\n            for (var _b = 0, classList_2 = classList; _b < classList_2.length; _b++) {\n                var className = classList_2[_b];\n                if (flag) {\n                    var classes_1 = getValue('attributes.className', ele);\n                    var classArr = classes_1.split(' ');\n                    var index = classArr.indexOf(className);\n                    if (index !== -1) {\n                        classArr.splice(index, 1);\n                    }\n                    setValue('attributes.className', classArr.join(' '), ele);\n                }\n                else {\n                    ele.classList.remove(className);\n                }\n            }\n        }\n    }\n    return elements;\n}\n/**\n * The function used to get classlist.\n *\n * @param  {string | string[]} classes - An element the need to check visibility\n * @returns {string[]} ?\n * @private\n */\nfunction getClassList(classes) {\n    var classList = [];\n    if (typeof classes === 'string') {\n        classList.push(classes);\n    }\n    else {\n        classList = classes;\n    }\n    return classList;\n}\n/**\n * The function used to check element is visible or not.\n *\n * @param  {Element|Node} element - An element the need to check visibility\n * @returns {boolean} ?\n * @private\n */\nexport function isVisible(element) {\n    var ele = element;\n    return (ele.style.visibility === '' && ele.offsetWidth > 0);\n}\n/**\n * The function used to insert an array of elements into a first of the element.\n *\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.\n * @param  {Element} toElement - An element that is going to prepend.\n * @param {boolean} isEval - ?\n * @returns {Element[] | NodeList} ?\n * @private\n */\nexport function prepend(fromElements, toElement, isEval) {\n    var docFrag = document.createDocumentFragment();\n    for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n        var ele = _a[_i];\n        docFrag.appendChild(ele);\n    }\n    toElement.insertBefore(docFrag, toElement.firstElementChild);\n    if (isEval) {\n        executeScript(toElement);\n    }\n    return fromElements;\n}\n/**\n * The function used to insert an array of elements into last of the element.\n *\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.\n * @param  {Element} toElement - An element that is going to prepend.\n * @param {boolean} isEval - ?\n * @returns {Element[] | NodeList} ?\n * @private\n */\nexport function append(fromElements, toElement, isEval) {\n    var docFrag = document.createDocumentFragment();\n    if (fromElements instanceof NodeList) {\n        while (fromElements.length > 0) {\n            docFrag.appendChild(fromElements[0]);\n        }\n    }\n    else {\n        for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n            var ele = _a[_i];\n            docFrag.appendChild(ele);\n        }\n    }\n    toElement.appendChild(docFrag);\n    if (isEval) {\n        executeScript(toElement);\n    }\n    return fromElements;\n}\n/**\n * The function is used to evaluate script from Ajax request\n *\n * @param {Element} ele - An element is going to evaluate the script\n * @returns {void} ?\n */\nfunction executeScript(ele) {\n    var eleArray = ele.querySelectorAll('script');\n    eleArray.forEach(function (element) {\n        var script = document.createElement('script');\n        script.text = element.innerHTML;\n        document.head.appendChild(script);\n        detach(script);\n    });\n}\n/**\n * The function used to remove the element from parentnode\n *\n * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom\n * @returns {any} ?\n * @private\n */\nexport function detach(element) {\n    var parentNode = element.parentNode;\n    if (parentNode) {\n        return parentNode.removeChild(element);\n    }\n}\n/**\n * The function used to remove the element from Dom also clear the bounded events\n *\n * @param  {Element|Node|HTMLElement} element - An element remove from the Dom\n * @returns {void} ?\n * @private\n */\nexport function remove(element) {\n    var parentNode = element.parentNode;\n    EventHandler.clearEvents(element);\n    parentNode.removeChild(element);\n}\n/**\n * The function helps to set multiple attributes to an element\n *\n * @param  {Element|Node} element - An element that need to set attributes.\n * @param  {string} attributes - JSON Object that is going to as attributes.\n * @returns {Element} ?\n * @private\n */\nexport function attributes(element, attributes) {\n    var keys = Object.keys(attributes);\n    var ele = element;\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n        var key = keys_1[_i];\n        if (isObject(ele)) {\n            var iKey = key;\n            if (key === 'tabindex') {\n                iKey = 'tabIndex';\n            }\n            ele.attributes[\"\" + iKey] = attributes[\"\" + key];\n        }\n        else {\n            ele.setAttribute(key, attributes[\"\" + key]);\n        }\n    }\n    return ele;\n}\n/**\n * The function selects the element from giving context.\n *\n * @param  {string} selector - Selector string need fetch element\n * @param  {Document|Element} context - It is an optional type, That specifies a Dom context.\n * @param {boolean} needsVDOM ?\n * @returns {any} ?\n * @private\n */\nexport function select(selector, context, needsVDOM) {\n    if (context === void 0) { context = document; }\n    selector = querySelectId(selector);\n    return context.querySelector(selector);\n}\n/**\n * The function selects an array of element from the given context.\n *\n * @param  {string} selector - Selector string need fetch element\n * @param  {Document|Element} context - It is an optional type, That specifies a Dom context.\n * @param {boolean} needsVDOM ?\n * @returns {HTMLElement[]} ?\n * @private\n */\nexport function selectAll(selector, context, needsVDOM) {\n    if (context === void 0) { context = document; }\n    selector = querySelectId(selector);\n    var nodeList = context.querySelectorAll(selector);\n    return nodeList;\n}\n/**\n * The function selects an id of element from the given context.\n *\n * @param  {string} selector - Selector string need fetch element\n * @returns {string} ?\n * @private\n */\nfunction querySelectId(selector) {\n    var charRegex = /(!|\"|\\$|%|&|'|\\(|\\)|\\*|\\/|:|;|<|=|\\?|@|\\]|\\^|`|{|}|\\||\\+|~)/g;\n    if (selector.match(/#[0-9]/g) || selector.match(charRegex)) {\n        var idList = selector.split(',');\n        for (var i = 0; i < idList.length; i++) {\n            var list = idList[parseInt(i.toString(), 10)].split(' ');\n            for (var j = 0; j < list.length; j++) {\n                if (list[parseInt(j.toString(), 10)].indexOf('#') > -1) {\n                    if (!list[parseInt(j.toString(), 10)].match(/\\[.*\\]/)) {\n                        var splitId = list[parseInt(j.toString(), 10)].split('#');\n                        if (splitId[1].match(/^\\d/) || splitId[1].match(charRegex)) {\n                            var setId = list[parseInt(j.toString(), 10)].split('.');\n                            setId[0] = setId[0].replace(/#/, '[id=\\'') + '\\']';\n                            list[parseInt(j.toString(), 10)] = setId.join('.');\n                        }\n                    }\n                }\n            }\n            idList[parseInt(i.toString(), 10)] = list.join(' ');\n        }\n        return idList.join(',');\n    }\n    return selector;\n}\n/**\n * Returns single closest parent element based on class selector.\n *\n * @param  {Element} element - An element that need to find the closest element.\n * @param  {string} selector - A classSelector of closest element.\n * @returns {Element} ?\n * @private\n */\nexport function closest(element, selector) {\n    var el = element;\n    if (typeof el.closest === 'function') {\n        return el.closest(selector);\n    }\n    while (el && el.nodeType === 1) {\n        if (matches(el, selector)) {\n            return el;\n        }\n        el = el.parentNode;\n    }\n    return null;\n}\n/**\n * Returns all sibling elements of the given element.\n *\n * @param  {Element|Node} element - An element that need to get siblings.\n * @returns {Element[]} ?\n * @private\n */\nexport function siblings(element) {\n    var siblings = [];\n    var childNodes = Array.prototype.slice.call(element.parentNode.childNodes);\n    for (var _i = 0, childNodes_1 = childNodes; _i < childNodes_1.length; _i++) {\n        var curNode = childNodes_1[_i];\n        if (curNode.nodeType === Node.ELEMENT_NODE && element !== curNode) {\n            siblings.push(curNode);\n        }\n    }\n    return siblings;\n}\n/**\n * set the value if not exist. Otherwise set the existing value\n *\n * @param  {HTMLElement} element - An element to which we need to set value.\n * @param  {string} property - Property need to get or set.\n * @param  {string} value - value need to set.\n * @returns {string} ?\n * @private\n */\nexport function getAttributeOrDefault(element, property, value) {\n    var attrVal;\n    var isObj = isObject(element);\n    if (isObj) {\n        attrVal = getValue('attributes.' + property, element);\n    }\n    else {\n        attrVal = element.getAttribute(property);\n    }\n    if (isNullOrUndefined(attrVal) && value) {\n        if (!isObj) {\n            element.setAttribute(property, value.toString());\n        }\n        else {\n            element.attributes[\"\" + property] = value;\n        }\n        attrVal = value;\n    }\n    return attrVal;\n}\n/**\n * Set the style attributes to Html element.\n *\n * @param {HTMLElement} element - Element which we want to set attributes\n * @param {any} attrs - Set the given attributes to element\n * @returns {void} ?\n * @private\n */\nexport function setStyleAttribute(element, attrs) {\n    if (attrs !== undefined) {\n        Object.keys(attrs).forEach(function (key) {\n            element.style[\"\" + key] = attrs[\"\" + key];\n        });\n    }\n}\n/**\n * Method for add and remove classes to a dom element.\n *\n * @param {Element} element - Element for add and remove classes\n * @param {string[]} addClasses - List of classes need to be add to the element\n * @param {string[]} removeClasses - List of classes need to be remove from the element\n * @returns {void} ?\n * @private\n */\nexport function classList(element, addClasses, removeClasses) {\n    addClass([element], addClasses);\n    removeClass([element], removeClasses);\n}\n/**\n * Method to check whether the element matches the given selector.\n *\n * @param {Element} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @returns {void} ?\n * @private\n */\nexport function matches(element, selector) {\n    var matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;\n    if (matches) {\n        return matches.call(element, selector);\n    }\n    else {\n        return [].indexOf.call(document.querySelectorAll(selector), element) !== -1;\n    }\n}\n/**\n * Method to get the html text from DOM.\n *\n * @param {HTMLElement} ele - Element to compare with the selector.\n * @param {string} innerHTML - String selector which element will satisfy.\n * @returns {void} ?\n * @private\n */\nexport function includeInnerHTML(ele, innerHTML) {\n    ele.innerHTML = innerHTML;\n}\n/**\n * Method to get the containsclass.\n *\n * @param {HTMLElement} ele - Element to compare with the selector.\n * @param {string} className - String selector which element will satisfy.\n * @returns {any} ?\n * @private\n */\nexport function containsClass(ele, className) {\n    if (isObject(ele)) {\n        var regExp = RegExp;\n        return new regExp('\\\\b' + className + '\\\\b', 'i').test(ele.attributes.className);\n    }\n    else {\n        return ele.classList.contains(className);\n    }\n}\n/**\n * Method to check whether the element matches the given selector.\n *\n * @param {Object} element - Element to compare with the selector.\n * @param {boolean} deep ?\n * @returns {any} ?\n * @private\n */\nexport function cloneNode(element, deep) {\n    if (isObject(element)) {\n        if (deep) {\n            return extend({}, {}, element, true);\n        }\n    }\n    else {\n        return element.cloneNode(deep);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}