{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.Delaunator = factory());\n})(this, function () {\n  'use strict';\n\n  var EPSILON = Math.pow(2, -52);\n  var EDGE_STACK = new Uint32Array(512);\n  var Delaunator = function Delaunator(coords) {\n    var n = coords.length >> 1;\n    if (n > 0 && typeof coords[0] !== 'number') {\n      throw new Error('Expected coords to contain numbers.');\n    }\n    this.coords = coords;\n\n    // arrays that will store the triangulation graph\n    var maxTriangles = Math.max(2 * n - 5, 0);\n    this._triangles = new Uint32Array(maxTriangles * 3);\n    this._halfedges = new Int32Array(maxTriangles * 3);\n\n    // temporary arrays for tracking the edges of the advancing convex hull\n    this._hashSize = Math.ceil(Math.sqrt(n));\n    this._hullPrev = new Uint32Array(n); // edge to prev edge\n    this._hullNext = new Uint32Array(n); // edge to next edge\n    this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n    this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\n\n    // temporary arrays for sorting points\n    this._ids = new Uint32Array(n);\n    this._dists = new Float64Array(n);\n    this.update();\n  };\n  Delaunator.from = function from(points, getX, getY) {\n    if (getX === void 0) getX = defaultGetX;\n    if (getY === void 0) getY = defaultGetY;\n    var n = points.length;\n    var coords = new Float64Array(n * 2);\n    for (var i = 0; i < n; i++) {\n      var p = points[i];\n      coords[2 * i] = getX(p);\n      coords[2 * i + 1] = getY(p);\n    }\n    return new Delaunator(coords);\n  };\n  Delaunator.prototype.update = function update() {\n    var ref = this;\n    var coords = ref.coords;\n    var hullPrev = ref._hullPrev;\n    var hullNext = ref._hullNext;\n    var hullTri = ref._hullTri;\n    var hullHash = ref._hullHash;\n    var n = coords.length >> 1;\n\n    // populate an array of point indices; calculate input data bbox\n    var minX = Infinity;\n    var minY = Infinity;\n    var maxX = -Infinity;\n    var maxY = -Infinity;\n    for (var i = 0; i < n; i++) {\n      var x = coords[2 * i];\n      var y = coords[2 * i + 1];\n      if (x < minX) {\n        minX = x;\n      }\n      if (y < minY) {\n        minY = y;\n      }\n      if (x > maxX) {\n        maxX = x;\n      }\n      if (y > maxY) {\n        maxY = y;\n      }\n      this._ids[i] = i;\n    }\n    var cx = (minX + maxX) / 2;\n    var cy = (minY + maxY) / 2;\n    var minDist = Infinity;\n    var i0, i1, i2;\n\n    // pick a seed point close to the center\n    for (var i$1 = 0; i$1 < n; i$1++) {\n      var d = dist(cx, cy, coords[2 * i$1], coords[2 * i$1 + 1]);\n      if (d < minDist) {\n        i0 = i$1;\n        minDist = d;\n      }\n    }\n    var i0x = coords[2 * i0];\n    var i0y = coords[2 * i0 + 1];\n    minDist = Infinity;\n\n    // find the point closest to the seed\n    for (var i$2 = 0; i$2 < n; i$2++) {\n      if (i$2 === i0) {\n        continue;\n      }\n      var d$1 = dist(i0x, i0y, coords[2 * i$2], coords[2 * i$2 + 1]);\n      if (d$1 < minDist && d$1 > 0) {\n        i1 = i$2;\n        minDist = d$1;\n      }\n    }\n    var i1x = coords[2 * i1];\n    var i1y = coords[2 * i1 + 1];\n    var minRadius = Infinity;\n\n    // find the third point which forms the smallest circumcircle with the first two\n    for (var i$3 = 0; i$3 < n; i$3++) {\n      if (i$3 === i0 || i$3 === i1) {\n        continue;\n      }\n      var r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i$3], coords[2 * i$3 + 1]);\n      if (r < minRadius) {\n        i2 = i$3;\n        minRadius = r;\n      }\n    }\n    var i2x = coords[2 * i2];\n    var i2y = coords[2 * i2 + 1];\n    if (minRadius === Infinity) {\n      // order collinear points by dx (or dy if all x are identical)\n      // and return the list as a hull\n      for (var i$4 = 0; i$4 < n; i$4++) {\n        this._dists[i$4] = coords[2 * i$4] - coords[0] || coords[2 * i$4 + 1] - coords[1];\n      }\n      quicksort(this._ids, this._dists, 0, n - 1);\n      var hull = new Uint32Array(n);\n      var j = 0;\n      for (var i$5 = 0, d0 = -Infinity; i$5 < n; i$5++) {\n        var id = this._ids[i$5];\n        if (this._dists[id] > d0) {\n          hull[j++] = id;\n          d0 = this._dists[id];\n        }\n      }\n      this.hull = hull.subarray(0, j);\n      this.triangles = new Uint32Array(0);\n      this.halfedges = new Uint32Array(0);\n      return;\n    }\n\n    // swap the order of the seed points for counter-clockwise orientation\n    if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {\n      var i$6 = i1;\n      var x$1 = i1x;\n      var y$1 = i1y;\n      i1 = i2;\n      i1x = i2x;\n      i1y = i2y;\n      i2 = i$6;\n      i2x = x$1;\n      i2y = y$1;\n    }\n    var center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n    this._cx = center.x;\n    this._cy = center.y;\n    for (var i$7 = 0; i$7 < n; i$7++) {\n      this._dists[i$7] = dist(coords[2 * i$7], coords[2 * i$7 + 1], center.x, center.y);\n    }\n\n    // sort the points by distance from the seed triangle circumcenter\n    quicksort(this._ids, this._dists, 0, n - 1);\n\n    // set up the seed triangle as the starting hull\n    this._hullStart = i0;\n    var hullSize = 3;\n    hullNext[i0] = hullPrev[i2] = i1;\n    hullNext[i1] = hullPrev[i0] = i2;\n    hullNext[i2] = hullPrev[i1] = i0;\n    hullTri[i0] = 0;\n    hullTri[i1] = 1;\n    hullTri[i2] = 2;\n    hullHash.fill(-1);\n    hullHash[this._hashKey(i0x, i0y)] = i0;\n    hullHash[this._hashKey(i1x, i1y)] = i1;\n    hullHash[this._hashKey(i2x, i2y)] = i2;\n    this.trianglesLen = 0;\n    this._addTriangle(i0, i1, i2, -1, -1, -1);\n    for (var k = 0, xp = void 0, yp = void 0; k < this._ids.length; k++) {\n      var i$8 = this._ids[k];\n      var x$2 = coords[2 * i$8];\n      var y$2 = coords[2 * i$8 + 1];\n\n      // skip near-duplicate points\n      if (k > 0 && Math.abs(x$2 - xp) <= EPSILON && Math.abs(y$2 - yp) <= EPSILON) {\n        continue;\n      }\n      xp = x$2;\n      yp = y$2;\n\n      // skip seed triangle points\n      if (i$8 === i0 || i$8 === i1 || i$8 === i2) {\n        continue;\n      }\n\n      // find a visible edge on the convex hull using edge hash\n      var start = 0;\n      for (var j$1 = 0, key = this._hashKey(x$2, y$2); j$1 < this._hashSize; j$1++) {\n        start = hullHash[(key + j$1) % this._hashSize];\n        if (start !== -1 && start !== hullNext[start]) {\n          break;\n        }\n      }\n      start = hullPrev[start];\n      var e = start,\n        q = void 0;\n      while (q = hullNext[e], !orient(x$2, y$2, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {\n        e = q;\n        if (e === start) {\n          e = -1;\n          break;\n        }\n      }\n      if (e === -1) {\n        continue;\n      } // likely a near-duplicate point; skip it\n\n      // add the first triangle from the point\n      var t = this._addTriangle(e, i$8, hullNext[e], -1, -1, hullTri[e]);\n\n      // recursively flip triangles from the point until they satisfy the Delaunay condition\n      hullTri[i$8] = this._legalize(t + 2);\n      hullTri[e] = t; // keep track of boundary triangles on the hull\n      hullSize++;\n\n      // walk forward through the hull, adding more triangles and flipping recursively\n      var n$1 = hullNext[e];\n      while (q = hullNext[n$1], orient(x$2, y$2, coords[2 * n$1], coords[2 * n$1 + 1], coords[2 * q], coords[2 * q + 1])) {\n        t = this._addTriangle(n$1, i$8, q, hullTri[i$8], -1, hullTri[n$1]);\n        hullTri[i$8] = this._legalize(t + 2);\n        hullNext[n$1] = n$1; // mark as removed\n        hullSize--;\n        n$1 = q;\n      }\n\n      // walk backward from the other side, adding more triangles and flipping\n      if (e === start) {\n        while (q = hullPrev[e], orient(x$2, y$2, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {\n          t = this._addTriangle(q, i$8, e, -1, hullTri[e], hullTri[q]);\n          this._legalize(t + 2);\n          hullTri[q] = t;\n          hullNext[e] = e; // mark as removed\n          hullSize--;\n          e = q;\n        }\n      }\n\n      // update the hull indices\n      this._hullStart = hullPrev[i$8] = e;\n      hullNext[e] = hullPrev[n$1] = i$8;\n      hullNext[i$8] = n$1;\n\n      // save the two new edges in the hash table\n      hullHash[this._hashKey(x$2, y$2)] = i$8;\n      hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n    }\n    this.hull = new Uint32Array(hullSize);\n    for (var i$9 = 0, e$1 = this._hullStart; i$9 < hullSize; i$9++) {\n      this.hull[i$9] = e$1;\n      e$1 = hullNext[e$1];\n    }\n\n    // trim typed triangle mesh arrays\n    this.triangles = this._triangles.subarray(0, this.trianglesLen);\n    this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n  };\n  Delaunator.prototype._hashKey = function _hashKey(x, y) {\n    return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n  };\n  Delaunator.prototype._legalize = function _legalize(a) {\n    var ref = this;\n    var triangles = ref._triangles;\n    var halfedges = ref._halfedges;\n    var coords = ref.coords;\n    var i = 0;\n    var ar = 0;\n\n    // recursion eliminated with a fixed-size stack\n    while (true) {\n      var b = halfedges[a];\n\n      /* if the pair of triangles doesn't satisfy the Delaunay condition\n       * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n       * then do the same check/flip recursively for the new pair of triangles\n       *\n       *       pl                pl\n       *      /||\\              /  \\\n       *   al/ || \\bl        al/\\a\n       *    /  ||  \\          /  \\\n       *   /  a||b  \\flip/___ar___\\\n       * p0\\   ||   /p1   =>   p0\\---bl---/p1\n       *    \\  ||  /          \\  /\n       *   ar\\ || /br         b\\/br\n       *      \\||/              \\  /\n       *       pr                pr\n       */\n      var a0 = a - a % 3;\n      ar = a0 + (a + 2) % 3;\n      if (b === -1) {\n        // convex hull edge\n        if (i === 0) {\n          break;\n        }\n        a = EDGE_STACK[--i];\n        continue;\n      }\n      var b0 = b - b % 3;\n      var al = a0 + (a + 1) % 3;\n      var bl = b0 + (b + 2) % 3;\n      var p0 = triangles[ar];\n      var pr = triangles[a];\n      var pl = triangles[al];\n      var p1 = triangles[bl];\n      var illegal = inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1]);\n      if (illegal) {\n        triangles[a] = p1;\n        triangles[b] = p0;\n        var hbl = halfedges[bl];\n\n        // edge swapped on the other side of the hull (rare); fix the halfedge reference\n        if (hbl === -1) {\n          var e = this._hullStart;\n          do {\n            if (this._hullTri[e] === bl) {\n              this._hullTri[e] = a;\n              break;\n            }\n            e = this._hullPrev[e];\n          } while (e !== this._hullStart);\n        }\n        this._link(a, hbl);\n        this._link(b, halfedges[ar]);\n        this._link(ar, bl);\n        var br = b0 + (b + 1) % 3;\n\n        // don't worry about hitting the cap: it can only happen on extremely degenerate input\n        if (i < EDGE_STACK.length) {\n          EDGE_STACK[i++] = br;\n        }\n      } else {\n        if (i === 0) {\n          break;\n        }\n        a = EDGE_STACK[--i];\n      }\n    }\n    return ar;\n  };\n  Delaunator.prototype._link = function _link(a, b) {\n    this._halfedges[a] = b;\n    if (b !== -1) {\n      this._halfedges[b] = a;\n    }\n  };\n\n  // add a new triangle given vertex indices and adjacent half-edge ids\n  Delaunator.prototype._addTriangle = function _addTriangle(i0, i1, i2, a, b, c) {\n    var t = this.trianglesLen;\n    this._triangles[t] = i0;\n    this._triangles[t + 1] = i1;\n    this._triangles[t + 2] = i2;\n    this._link(t, a);\n    this._link(t + 1, b);\n    this._link(t + 2, c);\n    this.trianglesLen += 3;\n    return t;\n  };\n\n  // monotonically increases with real angle, but doesn't need expensive trigonometry\n  function pseudoAngle(dx, dy) {\n    var p = dx / (Math.abs(dx) + Math.abs(dy));\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n  }\n  function dist(ax, ay, bx, by) {\n    var dx = ax - bx;\n    var dy = ay - by;\n    return dx * dx + dy * dy;\n  }\n\n  // return 2d orientation sign if we're confident in it through J. Shewchuk's error bound check\n  function orientIfSure(px, py, rx, ry, qx, qy) {\n    var l = (ry - py) * (qx - px);\n    var r = (rx - px) * (qy - py);\n    return Math.abs(l - r) >= 3.3306690738754716e-16 * Math.abs(l + r) ? l - r : 0;\n  }\n\n  // a more robust orientation test that's stable in a given triangle (to fix robustness issues)\n  function orient(rx, ry, qx, qy, px, py) {\n    var sign = orientIfSure(px, py, rx, ry, qx, qy) || orientIfSure(rx, ry, qx, qy, px, py) || orientIfSure(qx, qy, px, py, rx, ry);\n    return sign < 0;\n  }\n  function inCircle(ax, ay, bx, by, cx, cy, px, py) {\n    var dx = ax - px;\n    var dy = ay - py;\n    var ex = bx - px;\n    var ey = by - py;\n    var fx = cx - px;\n    var fy = cy - py;\n    var ap = dx * dx + dy * dy;\n    var bp = ex * ex + ey * ey;\n    var cp = fx * fx + fy * fy;\n    return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;\n  }\n  function circumradius(ax, ay, bx, by, cx, cy) {\n    var dx = bx - ax;\n    var dy = by - ay;\n    var ex = cx - ax;\n    var ey = cy - ay;\n    var bl = dx * dx + dy * dy;\n    var cl = ex * ex + ey * ey;\n    var d = 0.5 / (dx * ey - dy * ex);\n    var x = (ey * bl - dy * cl) * d;\n    var y = (dx * cl - ex * bl) * d;\n    return x * x + y * y;\n  }\n  function circumcenter(ax, ay, bx, by, cx, cy) {\n    var dx = bx - ax;\n    var dy = by - ay;\n    var ex = cx - ax;\n    var ey = cy - ay;\n    var bl = dx * dx + dy * dy;\n    var cl = ex * ex + ey * ey;\n    var d = 0.5 / (dx * ey - dy * ex);\n    var x = ax + (ey * bl - dy * cl) * d;\n    var y = ay + (dx * cl - ex * bl) * d;\n    return {\n      x: x,\n      y: y\n    };\n  }\n  function quicksort(ids, dists, left, right) {\n    if (right - left <= 20) {\n      for (var i = left + 1; i <= right; i++) {\n        var temp = ids[i];\n        var tempDist = dists[temp];\n        var j = i - 1;\n        while (j >= left && dists[ids[j]] > tempDist) {\n          ids[j + 1] = ids[j--];\n        }\n        ids[j + 1] = temp;\n      }\n    } else {\n      var median = left + right >> 1;\n      var i$1 = left + 1;\n      var j$1 = right;\n      swap(ids, median, i$1);\n      if (dists[ids[left]] > dists[ids[right]]) {\n        swap(ids, left, right);\n      }\n      if (dists[ids[i$1]] > dists[ids[right]]) {\n        swap(ids, i$1, right);\n      }\n      if (dists[ids[left]] > dists[ids[i$1]]) {\n        swap(ids, left, i$1);\n      }\n      var temp$1 = ids[i$1];\n      var tempDist$1 = dists[temp$1];\n      while (true) {\n        do {\n          i$1++;\n        } while (dists[ids[i$1]] < tempDist$1);\n        do {\n          j$1--;\n        } while (dists[ids[j$1]] > tempDist$1);\n        if (j$1 < i$1) {\n          break;\n        }\n        swap(ids, i$1, j$1);\n      }\n      ids[left + 1] = ids[j$1];\n      ids[j$1] = temp$1;\n      if (right - i$1 + 1 >= j$1 - left) {\n        quicksort(ids, dists, i$1, right);\n        quicksort(ids, dists, left, j$1 - 1);\n      } else {\n        quicksort(ids, dists, left, j$1 - 1);\n        quicksort(ids, dists, i$1, right);\n      }\n    }\n  }\n  function swap(arr, i, j) {\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n  }\n  function defaultGetX(p) {\n    return p[0];\n  }\n  function defaultGetY(p) {\n    return p[1];\n  }\n  return Delaunator;\n});","map":{"version":3,"names":["global","factory","exports","module","define","amd","self","Delaunator","EPSILON","Math","pow","EDGE_STACK","Uint32Array","coords","n","length","Error","maxTriangles","max","_triangles","_halfedges","Int32Array","_hashSize","ceil","sqrt","_hullPrev","_hullNext","_hullTri","_hullHash","fill","_ids","_dists","Float64Array","update","from","points","getX","getY","defaultGetX","defaultGetY","i","p","prototype","ref","hullPrev","hullNext","hullTri","hullHash","minX","Infinity","minY","maxX","maxY","x","y","cx","cy","minDist","i0","i1","i2","i$1","d","dist","i0x","i0y","i$2","d$1","i1x","i1y","minRadius","i$3","r","circumradius","i2x","i2y","i$4","quicksort","hull","j","i$5","d0","id","subarray","triangles","halfedges","orient","i$6","x$1","y$1","center","circumcenter","_cx","_cy","i$7","_hullStart","hullSize","_hashKey","trianglesLen","_addTriangle","k","xp","yp","i$8","x$2","y$2","abs","start","j$1","key","e","q","t","_legalize","n$1","i$9","e$1","floor","pseudoAngle","a","ar","b","a0","b0","al","bl","p0","pr","pl","p1","illegal","inCircle","hbl","_link","br","c","dx","dy","ax","ay","bx","by","orientIfSure","px","py","rx","ry","qx","qy","l","sign","ex","ey","fx","fy","ap","bp","cp","cl","ids","dists","left","right","temp","tempDist","median","swap","temp$1","tempDist$1","arr","tmp"],"sources":["/Users/anjalichaturvedi/GitHub/brew-bridge-dashboard/website/node_modules/delaunator/delaunator.js"],"sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global = global || self, global.Delaunator = factory());\n}(this, function () { 'use strict';\n\n    var EPSILON = Math.pow(2, -52);\n    var EDGE_STACK = new Uint32Array(512);\n\n    var Delaunator = function Delaunator(coords) {\n        var n = coords.length >> 1;\n        if (n > 0 && typeof coords[0] !== 'number') { throw new Error('Expected coords to contain numbers.'); }\n\n        this.coords = coords;\n\n        // arrays that will store the triangulation graph\n        var maxTriangles = Math.max(2 * n - 5, 0);\n        this._triangles = new Uint32Array(maxTriangles * 3);\n        this._halfedges = new Int32Array(maxTriangles * 3);\n\n        // temporary arrays for tracking the edges of the advancing convex hull\n        this._hashSize = Math.ceil(Math.sqrt(n));\n        this._hullPrev = new Uint32Array(n); // edge to prev edge\n        this._hullNext = new Uint32Array(n); // edge to next edge\n        this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n        this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\n\n        // temporary arrays for sorting points\n        this._ids = new Uint32Array(n);\n        this._dists = new Float64Array(n);\n\n        this.update();\n    };\n\n    Delaunator.from = function from (points, getX, getY) {\n            if ( getX === void 0 ) getX = defaultGetX;\n            if ( getY === void 0 ) getY = defaultGetY;\n\n        var n = points.length;\n        var coords = new Float64Array(n * 2);\n\n        for (var i = 0; i < n; i++) {\n            var p = points[i];\n            coords[2 * i] = getX(p);\n            coords[2 * i + 1] = getY(p);\n        }\n\n        return new Delaunator(coords);\n    };\n\n    Delaunator.prototype.update = function update () {\n        var ref =  this;\n            var coords = ref.coords;\n            var hullPrev = ref._hullPrev;\n            var hullNext = ref._hullNext;\n            var hullTri = ref._hullTri;\n            var hullHash = ref._hullHash;\n        var n = coords.length >> 1;\n\n        // populate an array of point indices; calculate input data bbox\n        var minX = Infinity;\n        var minY = Infinity;\n        var maxX = -Infinity;\n        var maxY = -Infinity;\n\n        for (var i = 0; i < n; i++) {\n            var x = coords[2 * i];\n            var y = coords[2 * i + 1];\n            if (x < minX) { minX = x; }\n            if (y < minY) { minY = y; }\n            if (x > maxX) { maxX = x; }\n            if (y > maxY) { maxY = y; }\n            this._ids[i] = i;\n        }\n        var cx = (minX + maxX) / 2;\n        var cy = (minY + maxY) / 2;\n\n        var minDist = Infinity;\n        var i0, i1, i2;\n\n        // pick a seed point close to the center\n        for (var i$1 = 0; i$1 < n; i$1++) {\n            var d = dist(cx, cy, coords[2 * i$1], coords[2 * i$1 + 1]);\n            if (d < minDist) {\n                i0 = i$1;\n                minDist = d;\n            }\n        }\n        var i0x = coords[2 * i0];\n        var i0y = coords[2 * i0 + 1];\n\n        minDist = Infinity;\n\n        // find the point closest to the seed\n        for (var i$2 = 0; i$2 < n; i$2++) {\n            if (i$2 === i0) { continue; }\n            var d$1 = dist(i0x, i0y, coords[2 * i$2], coords[2 * i$2 + 1]);\n            if (d$1 < minDist && d$1 > 0) {\n                i1 = i$2;\n                minDist = d$1;\n            }\n        }\n        var i1x = coords[2 * i1];\n        var i1y = coords[2 * i1 + 1];\n\n        var minRadius = Infinity;\n\n        // find the third point which forms the smallest circumcircle with the first two\n        for (var i$3 = 0; i$3 < n; i$3++) {\n            if (i$3 === i0 || i$3 === i1) { continue; }\n            var r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i$3], coords[2 * i$3 + 1]);\n            if (r < minRadius) {\n                i2 = i$3;\n                minRadius = r;\n            }\n        }\n        var i2x = coords[2 * i2];\n        var i2y = coords[2 * i2 + 1];\n\n        if (minRadius === Infinity) {\n            // order collinear points by dx (or dy if all x are identical)\n            // and return the list as a hull\n            for (var i$4 = 0; i$4 < n; i$4++) {\n                this._dists[i$4] = (coords[2 * i$4] - coords[0]) || (coords[2 * i$4 + 1] - coords[1]);\n            }\n            quicksort(this._ids, this._dists, 0, n - 1);\n            var hull = new Uint32Array(n);\n            var j = 0;\n            for (var i$5 = 0, d0 = -Infinity; i$5 < n; i$5++) {\n                var id = this._ids[i$5];\n                if (this._dists[id] > d0) {\n                    hull[j++] = id;\n                    d0 = this._dists[id];\n                }\n            }\n            this.hull = hull.subarray(0, j);\n            this.triangles = new Uint32Array(0);\n            this.halfedges = new Uint32Array(0);\n            return;\n        }\n\n        // swap the order of the seed points for counter-clockwise orientation\n        if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {\n            var i$6 = i1;\n            var x$1 = i1x;\n            var y$1 = i1y;\n            i1 = i2;\n            i1x = i2x;\n            i1y = i2y;\n            i2 = i$6;\n            i2x = x$1;\n            i2y = y$1;\n        }\n\n        var center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n        this._cx = center.x;\n        this._cy = center.y;\n\n        for (var i$7 = 0; i$7 < n; i$7++) {\n            this._dists[i$7] = dist(coords[2 * i$7], coords[2 * i$7 + 1], center.x, center.y);\n        }\n\n        // sort the points by distance from the seed triangle circumcenter\n        quicksort(this._ids, this._dists, 0, n - 1);\n\n        // set up the seed triangle as the starting hull\n        this._hullStart = i0;\n        var hullSize = 3;\n\n        hullNext[i0] = hullPrev[i2] = i1;\n        hullNext[i1] = hullPrev[i0] = i2;\n        hullNext[i2] = hullPrev[i1] = i0;\n\n        hullTri[i0] = 0;\n        hullTri[i1] = 1;\n        hullTri[i2] = 2;\n\n        hullHash.fill(-1);\n        hullHash[this._hashKey(i0x, i0y)] = i0;\n        hullHash[this._hashKey(i1x, i1y)] = i1;\n        hullHash[this._hashKey(i2x, i2y)] = i2;\n\n        this.trianglesLen = 0;\n        this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n        for (var k = 0, xp = (void 0), yp = (void 0); k < this._ids.length; k++) {\n            var i$8 = this._ids[k];\n            var x$2 = coords[2 * i$8];\n            var y$2 = coords[2 * i$8 + 1];\n\n            // skip near-duplicate points\n            if (k > 0 && Math.abs(x$2 - xp) <= EPSILON && Math.abs(y$2 - yp) <= EPSILON) { continue; }\n            xp = x$2;\n            yp = y$2;\n\n            // skip seed triangle points\n            if (i$8 === i0 || i$8 === i1 || i$8 === i2) { continue; }\n\n            // find a visible edge on the convex hull using edge hash\n            var start = 0;\n            for (var j$1 = 0, key = this._hashKey(x$2, y$2); j$1 < this._hashSize; j$1++) {\n                start = hullHash[(key + j$1) % this._hashSize];\n                if (start !== -1 && start !== hullNext[start]) { break; }\n            }\n\n            start = hullPrev[start];\n            var e = start, q = (void 0);\n            while (q = hullNext[e], !orient(x$2, y$2, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {\n                e = q;\n                if (e === start) {\n                    e = -1;\n                    break;\n                }\n            }\n            if (e === -1) { continue; } // likely a near-duplicate point; skip it\n\n            // add the first triangle from the point\n            var t = this._addTriangle(e, i$8, hullNext[e], -1, -1, hullTri[e]);\n\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\n            hullTri[i$8] = this._legalize(t + 2);\n            hullTri[e] = t; // keep track of boundary triangles on the hull\n            hullSize++;\n\n            // walk forward through the hull, adding more triangles and flipping recursively\n            var n$1 = hullNext[e];\n            while (q = hullNext[n$1], orient(x$2, y$2, coords[2 * n$1], coords[2 * n$1 + 1], coords[2 * q], coords[2 * q + 1])) {\n                t = this._addTriangle(n$1, i$8, q, hullTri[i$8], -1, hullTri[n$1]);\n                hullTri[i$8] = this._legalize(t + 2);\n                hullNext[n$1] = n$1; // mark as removed\n                hullSize--;\n                n$1 = q;\n            }\n\n            // walk backward from the other side, adding more triangles and flipping\n            if (e === start) {\n                while (q = hullPrev[e], orient(x$2, y$2, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {\n                    t = this._addTriangle(q, i$8, e, -1, hullTri[e], hullTri[q]);\n                    this._legalize(t + 2);\n                    hullTri[q] = t;\n                    hullNext[e] = e; // mark as removed\n                    hullSize--;\n                    e = q;\n                }\n            }\n\n            // update the hull indices\n            this._hullStart = hullPrev[i$8] = e;\n            hullNext[e] = hullPrev[n$1] = i$8;\n            hullNext[i$8] = n$1;\n\n            // save the two new edges in the hash table\n            hullHash[this._hashKey(x$2, y$2)] = i$8;\n            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n        }\n\n        this.hull = new Uint32Array(hullSize);\n        for (var i$9 = 0, e$1 = this._hullStart; i$9 < hullSize; i$9++) {\n            this.hull[i$9] = e$1;\n            e$1 = hullNext[e$1];\n        }\n\n        // trim typed triangle mesh arrays\n        this.triangles = this._triangles.subarray(0, this.trianglesLen);\n        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n    };\n\n    Delaunator.prototype._hashKey = function _hashKey (x, y) {\n        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    };\n\n    Delaunator.prototype._legalize = function _legalize (a) {\n        var ref = this;\n            var triangles = ref._triangles;\n            var halfedges = ref._halfedges;\n            var coords = ref.coords;\n\n        var i = 0;\n        var ar = 0;\n\n        // recursion eliminated with a fixed-size stack\n        while (true) {\n            var b = halfedges[a];\n\n            /* if the pair of triangles doesn't satisfy the Delaunay condition\n             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n             * then do the same check/flip recursively for the new pair of triangles\n             *\n             *       pl                pl\n             *      /||\\              /  \\\n             *   al/ || \\bl        al/\\a\n             *    /  ||  \\          /  \\\n             *   /  a||b  \\flip/___ar___\\\n             * p0\\   ||   /p1   =>   p0\\---bl---/p1\n             *    \\  ||  /          \\  /\n             *   ar\\ || /br         b\\/br\n             *      \\||/              \\  /\n             *       pr                pr\n             */\n            var a0 = a - a % 3;\n            ar = a0 + (a + 2) % 3;\n\n            if (b === -1) { // convex hull edge\n                if (i === 0) { break; }\n                a = EDGE_STACK[--i];\n                continue;\n            }\n\n            var b0 = b - b % 3;\n            var al = a0 + (a + 1) % 3;\n            var bl = b0 + (b + 2) % 3;\n\n            var p0 = triangles[ar];\n            var pr = triangles[a];\n            var pl = triangles[al];\n            var p1 = triangles[bl];\n\n            var illegal = inCircle(\n                coords[2 * p0], coords[2 * p0 + 1],\n                coords[2 * pr], coords[2 * pr + 1],\n                coords[2 * pl], coords[2 * pl + 1],\n                coords[2 * p1], coords[2 * p1 + 1]);\n\n            if (illegal) {\n                triangles[a] = p1;\n                triangles[b] = p0;\n\n                var hbl = halfedges[bl];\n\n                // edge swapped on the other side of the hull (rare); fix the halfedge reference\n                if (hbl === -1) {\n                    var e = this._hullStart;\n                    do {\n                        if (this._hullTri[e] === bl) {\n                            this._hullTri[e] = a;\n                            break;\n                        }\n                        e = this._hullPrev[e];\n                    } while (e !== this._hullStart);\n                }\n                this._link(a, hbl);\n                this._link(b, halfedges[ar]);\n                this._link(ar, bl);\n\n                var br = b0 + (b + 1) % 3;\n\n                // don't worry about hitting the cap: it can only happen on extremely degenerate input\n                if (i < EDGE_STACK.length) {\n                    EDGE_STACK[i++] = br;\n                }\n            } else {\n                if (i === 0) { break; }\n                a = EDGE_STACK[--i];\n            }\n        }\n\n        return ar;\n    };\n\n    Delaunator.prototype._link = function _link (a, b) {\n        this._halfedges[a] = b;\n        if (b !== -1) { this._halfedges[b] = a; }\n    };\n\n    // add a new triangle given vertex indices and adjacent half-edge ids\n    Delaunator.prototype._addTriangle = function _addTriangle (i0, i1, i2, a, b, c) {\n        var t = this.trianglesLen;\n\n        this._triangles[t] = i0;\n        this._triangles[t + 1] = i1;\n        this._triangles[t + 2] = i2;\n\n        this._link(t, a);\n        this._link(t + 1, b);\n        this._link(t + 2, c);\n\n        this.trianglesLen += 3;\n\n        return t;\n    };\n\n    // monotonically increases with real angle, but doesn't need expensive trigonometry\n    function pseudoAngle(dx, dy) {\n        var p = dx / (Math.abs(dx) + Math.abs(dy));\n        return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n    }\n\n    function dist(ax, ay, bx, by) {\n        var dx = ax - bx;\n        var dy = ay - by;\n        return dx * dx + dy * dy;\n    }\n\n    // return 2d orientation sign if we're confident in it through J. Shewchuk's error bound check\n    function orientIfSure(px, py, rx, ry, qx, qy) {\n        var l = (ry - py) * (qx - px);\n        var r = (rx - px) * (qy - py);\n        return Math.abs(l - r) >= 3.3306690738754716e-16 * Math.abs(l + r) ? l - r : 0;\n    }\n\n    // a more robust orientation test that's stable in a given triangle (to fix robustness issues)\n    function orient(rx, ry, qx, qy, px, py) {\n        var sign = orientIfSure(px, py, rx, ry, qx, qy) ||\n        orientIfSure(rx, ry, qx, qy, px, py) ||\n        orientIfSure(qx, qy, px, py, rx, ry);\n        return sign < 0;\n    }\n\n    function inCircle(ax, ay, bx, by, cx, cy, px, py) {\n        var dx = ax - px;\n        var dy = ay - py;\n        var ex = bx - px;\n        var ey = by - py;\n        var fx = cx - px;\n        var fy = cy - py;\n\n        var ap = dx * dx + dy * dy;\n        var bp = ex * ex + ey * ey;\n        var cp = fx * fx + fy * fy;\n\n        return dx * (ey * cp - bp * fy) -\n               dy * (ex * cp - bp * fx) +\n               ap * (ex * fy - ey * fx) < 0;\n    }\n\n    function circumradius(ax, ay, bx, by, cx, cy) {\n        var dx = bx - ax;\n        var dy = by - ay;\n        var ex = cx - ax;\n        var ey = cy - ay;\n\n        var bl = dx * dx + dy * dy;\n        var cl = ex * ex + ey * ey;\n        var d = 0.5 / (dx * ey - dy * ex);\n\n        var x = (ey * bl - dy * cl) * d;\n        var y = (dx * cl - ex * bl) * d;\n\n        return x * x + y * y;\n    }\n\n    function circumcenter(ax, ay, bx, by, cx, cy) {\n        var dx = bx - ax;\n        var dy = by - ay;\n        var ex = cx - ax;\n        var ey = cy - ay;\n\n        var bl = dx * dx + dy * dy;\n        var cl = ex * ex + ey * ey;\n        var d = 0.5 / (dx * ey - dy * ex);\n\n        var x = ax + (ey * bl - dy * cl) * d;\n        var y = ay + (dx * cl - ex * bl) * d;\n\n        return {x: x, y: y};\n    }\n\n    function quicksort(ids, dists, left, right) {\n        if (right - left <= 20) {\n            for (var i = left + 1; i <= right; i++) {\n                var temp = ids[i];\n                var tempDist = dists[temp];\n                var j = i - 1;\n                while (j >= left && dists[ids[j]] > tempDist) { ids[j + 1] = ids[j--]; }\n                ids[j + 1] = temp;\n            }\n        } else {\n            var median = (left + right) >> 1;\n            var i$1 = left + 1;\n            var j$1 = right;\n            swap(ids, median, i$1);\n            if (dists[ids[left]] > dists[ids[right]]) { swap(ids, left, right); }\n            if (dists[ids[i$1]] > dists[ids[right]]) { swap(ids, i$1, right); }\n            if (dists[ids[left]] > dists[ids[i$1]]) { swap(ids, left, i$1); }\n\n            var temp$1 = ids[i$1];\n            var tempDist$1 = dists[temp$1];\n            while (true) {\n                do { i$1++; } while (dists[ids[i$1]] < tempDist$1);\n                do { j$1--; } while (dists[ids[j$1]] > tempDist$1);\n                if (j$1 < i$1) { break; }\n                swap(ids, i$1, j$1);\n            }\n            ids[left + 1] = ids[j$1];\n            ids[j$1] = temp$1;\n\n            if (right - i$1 + 1 >= j$1 - left) {\n                quicksort(ids, dists, i$1, right);\n                quicksort(ids, dists, left, j$1 - 1);\n            } else {\n                quicksort(ids, dists, left, j$1 - 1);\n                quicksort(ids, dists, i$1, right);\n            }\n        }\n    }\n\n    function swap(arr, i, j) {\n        var tmp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = tmp;\n    }\n\n    function defaultGetX(p) {\n        return p[0];\n    }\n    function defaultGetY(p) {\n        return p[1];\n    }\n\n    return Delaunator;\n\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}