{"ast":null,"code":"import _pick from \"lodash/pick\";\nimport _defaults from \"lodash/defaults\";\nimport React from \"react\";\nimport { Selection, Helpers, Collection, LineSegment, Scale, Domain, Box } from \"victory-core\";\nimport isEqual from \"react-fast-compare\";\nconst SMALL_NUMBER = 1 / Number.MAX_SAFE_INTEGER;\nconst getScale = props => {\n  const {\n    scale = {},\n    dimension = \"x\"\n  } = props;\n  if (scale[dimension]) {\n    return scale[dimension];\n  }\n  const fallbackScale = Scale.getBaseScale(props, dimension);\n  const range = Helpers.getRange(props, dimension);\n  const domain = Domain.getDomainFromProps(props, dimension) || [0, 1];\n  fallbackScale.range(range).domain(domain);\n  return fallbackScale;\n};\nconst getDimension = props => {\n  const {\n    horizontal,\n    dimension = \"x\"\n  } = props;\n  if (!horizontal) {\n    return dimension;\n  }\n  return dimension === \"x\" ? \"y\" : \"x\";\n};\nconst toRange = (props, domain) => {\n  const scale = getScale(props);\n  return [scale(Math.min(...domain)), scale(Math.max(...domain))];\n};\nconst toDomain = (props, range) => {\n  const scale = getScale(props);\n  return [scale.invert(Math.min(...range)), scale.invert(Math.max(...range))];\n};\nconst getFullRange = props => {\n  const scale = getScale(props);\n  return scale.range();\n};\nconst getFullDomain = props => {\n  const scale = getScale(props);\n  return scale.domain();\n};\nconst withinBound = (value, bound) => {\n  return value >= Collection.getMinValue(bound) && value <= Collection.getMaxValue(bound);\n};\nconst getBrushDomain = (brushDomain, fullDomain) => {\n  if (brushDomain) {\n    const brushMin = Collection.getMinValue(brushDomain);\n    const brushMax = Collection.getMaxValue(brushDomain);\n    const domainMin = Collection.getMinValue(fullDomain);\n    const domainMax = Collection.getMaxValue(fullDomain);\n    const defaultMin = brushMin < domainMin ? domainMin : Number(domainMax) - SMALL_NUMBER;\n    const defaultMax = brushMax > domainMax ? domainMax : Number(domainMin) + SMALL_NUMBER;\n    const min = withinBound(brushMin, fullDomain) ? brushMin : defaultMin;\n    const max = withinBound(brushMax, fullDomain) ? brushMax : defaultMax;\n    return [min, max];\n  }\n  return fullDomain;\n};\nconst getActiveHandle = (props, position, range) => {\n  const width = props.handleWidth / 2;\n  const dimension = getDimension(props);\n  const getHandle = type => {\n    const base = {\n      min: dimension === \"x\" ? Math.min(...range) : Math.max(...range),\n      max: dimension === \"x\" ? Math.max(...range) : Math.min(...range)\n    };\n    return [base[type] - width, base[type] + width];\n  };\n  const active = [\"min\", \"max\"].reduce((memo, type) => {\n    memo[type] = withinBound(position, getHandle(type)) ? type : undefined;\n    return memo;\n  }, {});\n  return active.min && active.max ? \"both\" : active.min || active.max;\n};\nconst getMinimumDomain = () => {\n  return [0, SMALL_NUMBER];\n};\nconst panBox = (props, position) => {\n  const {\n    brushDomain,\n    startPosition\n  } = props;\n  const range = toRange(props, brushDomain);\n  const fullRange = getFullRange(props);\n  const size = Math.abs(range[1] - range[0]);\n  const globalMin = Math.min(...fullRange);\n  const globalMax = Math.max(...fullRange);\n  const delta = startPosition ? startPosition - position : 0;\n  const min = Math.min(...range) - delta;\n  const max = Math.max(...range) - delta;\n  const constrainedMin = min > globalMax - size ? globalMax - size : Math.max(min, globalMin);\n  const constrainedMax = max < globalMin + size ? globalMin + size : Math.min(max, globalMax);\n  return [constrainedMin, constrainedMax];\n};\nconst fallbackProps = {\n  brushAreaStyle: {\n    stroke: \"none\",\n    fill: \"black\",\n    opacity: _ref => {\n      let {\n        active\n      } = _ref;\n      return active ? 0.2 : 0.1;\n    } // eslint-disable-line no-magic-numbers\n  },\n  brushStyle: {\n    pointerEvents: \"none\",\n    stroke: \"none\",\n    fill: \"black\",\n    opacity: _ref2 => {\n      let {\n        active\n      } = _ref2;\n      return active ? 0.4 : 0.3;\n    } // eslint-disable-line no-magic-numbers\n  },\n  handleStyle: {\n    pointerEvents: \"none\",\n    stroke: \"none\",\n    fill: \"none\"\n  }\n};\nexport class VictoryBrushLine extends React.Component {\n  static defaultProps = {\n    allowDrag: true,\n    allowDraw: true,\n    allowResize: true,\n    brushAreaComponent: /*#__PURE__*/React.createElement(Box, null),\n    brushComponent: /*#__PURE__*/React.createElement(Box, null),\n    groupComponent: /*#__PURE__*/React.createElement(\"g\", null),\n    handleComponent: /*#__PURE__*/React.createElement(Box, null),\n    handleWidth: 10,\n    lineComponent: /*#__PURE__*/React.createElement(LineSegment, null),\n    width: 10\n  };\n  static defaultEvents = function (props) {\n    return props.disable ? undefined : [{\n      target: props.type,\n      eventHandlers: {\n        onMouseEnter: (evt, targetProps) => {\n          evt.preventDefault();\n          const {\n            allowResize,\n            brushDomain\n          } = targetProps;\n          const dimension = getDimension(targetProps);\n          const parentSVG = targetProps.parentSVG || Selection.getParentSVG(evt);\n          const position = Selection.getSVGEventCoordinates(evt, parentSVG)[dimension];\n          const fullDomain = getFullDomain(targetProps);\n          const currentDomain = getBrushDomain(brushDomain, fullDomain);\n          const range = toRange(targetProps, currentDomain);\n          const activeHandle = allowResize && getActiveHandle(targetProps, position, range);\n          const activeBrushes = {\n            brushArea: !targetProps.brushDomain,\n            brush: withinBound(position, range) && !isEqual(fullDomain, currentDomain),\n            minHandle: activeHandle === \"min\" || activeHandle === \"both\",\n            maxHandle: activeHandle === \"min\" || activeHandle === \"both\"\n          };\n          return [{\n            mutation: () => ({\n              activeBrushes,\n              brushDomain: targetProps.brushDomain,\n              parentSVG\n            })\n          }];\n        },\n        onMouseDown: (evt, targetProps) => {\n          evt.preventDefault();\n          const {\n            allowResize,\n            allowDrag,\n            allowDraw,\n            activeBrushes,\n            brushDomain\n          } = targetProps;\n          const dimension = getDimension(targetProps);\n\n          // Don't trigger events for static brushes\n          if (!allowResize && !allowDrag) {\n            return [];\n          }\n          const fullDomain = getFullDomain(targetProps);\n          const currentDomain = getBrushDomain(brushDomain, fullDomain);\n          const parentSVG = targetProps.parentSVG || Selection.getParentSVG(evt);\n          const position = Selection.getSVGEventCoordinates(evt, parentSVG)[dimension];\n          const range = toRange(targetProps, currentDomain);\n          const activeHandle = allowResize && getActiveHandle(targetProps, position, range);\n          // If the event occurs in any of the handle regions, start a resize\n          if (activeHandle) {\n            return [{\n              mutation: () => {\n                return {\n                  parentSVG,\n                  isSelecting: true,\n                  activeHandle,\n                  brushDomain: currentDomain,\n                  startPosition: position,\n                  activeBrushes\n                };\n              }\n            }];\n          } else if (withinBound(position, range) && !isEqual(fullDomain, currentDomain)) {\n            // if the event occurs within a selected region start a panning event, unless the whole\n            // domain is selected\n            return [{\n              mutation: () => ({\n                isPanning: allowDrag,\n                startPosition: position,\n                brushDomain: currentDomain,\n                activeBrushes,\n                parentSVG\n              })\n            }];\n          }\n          // if the event occurs outside the region, or if the whole domain is selected,\n          // start a new selection\n          return allowDraw ? [{\n            mutation: () => ({\n              isSelecting: allowResize,\n              brushDomain: null,\n              startPosition: position,\n              activeBrushes,\n              parentSVG\n            })\n          }] : [];\n        },\n        // eslint-disable-next-line max-statements, complexity\n        onMouseMove: (evt, targetProps) => {\n          const {\n            isPanning,\n            isSelecting,\n            allowResize,\n            allowDrag,\n            onBrushDomainChange,\n            brushDomain\n          } = targetProps;\n          const dimension = getDimension(targetProps);\n          if (isPanning || isSelecting) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n          const parentSVG = targetProps.parentSVG || Selection.getParentSVG(evt);\n          const position = Selection.getSVGEventCoordinates(evt, parentSVG)[dimension];\n          const fullDomain = getFullDomain(targetProps);\n          const domain = getBrushDomain(brushDomain, fullDomain);\n          const initialRange = toRange(targetProps, domain);\n          const activeHandle = getActiveHandle(targetProps, position, initialRange);\n          const activeBrushes = {\n            brushArea: !targetProps.brushDomain,\n            brush: withinBound(position, initialRange) && !isEqual(fullDomain, domain),\n            minHandle: activeHandle === \"min\" || activeHandle === \"both\",\n            maxHandle: activeHandle === \"max\" || activeHandle === \"both\"\n          };\n          if (!targetProps.isPanning && !targetProps.isSelecting) {\n            return [{\n              mutation: () => ({\n                activeBrushes,\n                brushDomain: targetProps.brushDomain,\n                parentSVG\n              })\n            }];\n          }\n          if (allowDrag && isPanning) {\n            const fullRange = getFullRange(targetProps);\n            const range = panBox(targetProps, position);\n            const currentDomain = toDomain(targetProps, range);\n            const startPosition = Math.max(...range) >= Math.max(...fullRange) || Math.min(...range) <= Math.min(...fullRange) ? targetProps.startPosition : position;\n            const mutatedProps = {\n              startPosition,\n              isPanning: true,\n              brushDomain: currentDomain,\n              activeBrushes: {\n                brush: true\n              },\n              parentSVG\n            };\n            if (Helpers.isFunction(onBrushDomainChange)) {\n              onBrushDomainChange(currentDomain, _defaults({}, mutatedProps, targetProps));\n            }\n            return [{\n              mutation: () => mutatedProps\n            }];\n          } else if (allowResize && isSelecting) {\n            let currentDomain = brushDomain || getMinimumDomain();\n            const range = toRange(targetProps, currentDomain);\n            const oppositeHandle = targetProps.activeHandle === \"min\" ? \"max\" : \"min\";\n            const handle = targetProps.activeHandle && getActiveHandle(targetProps, position, range) === \"both\" ? oppositeHandle : targetProps.activeHandle;\n            if (!handle) {\n              currentDomain = toDomain(targetProps, [targetProps.startPosition, position]);\n            } else {\n              const rangeMax = dimension === \"x\" ? Math.max(...range) : Math.min(...range);\n              const rangeMin = dimension === \"x\" ? Math.min(...range) : Math.max(...range);\n              const min = handle === \"max\" ? rangeMin : position;\n              const max = handle === \"min\" ? rangeMax : position;\n              currentDomain = toDomain(targetProps, [min, max]);\n            }\n            const mutatedProps = {\n              brushDomain: currentDomain,\n              startPosition: targetProps.startPosition,\n              isSelecting,\n              activeHandle: handle,\n              parentSVG,\n              activeBrushes: {\n                brush: true,\n                minHandle: activeHandle === \"min\",\n                maxHandle: activeHandle === \"max\"\n              }\n            };\n            if (Helpers.isFunction(onBrushDomainChange)) {\n              onBrushDomainChange(currentDomain, _defaults({}, mutatedProps, targetProps));\n            }\n            return [{\n              mutation: () => mutatedProps\n            }];\n          }\n          return [];\n        },\n        onMouseUp: (evt, targetProps) => {\n          const {\n            onBrushDomainChange,\n            brushDomain,\n            allowResize,\n            activeBrushes\n          } = targetProps;\n          // if the mouse hasn't moved since a mouseDown event, select the whole domain region\n          const mutatedProps = {\n            isPanning: false,\n            isSelecting: false,\n            activeHandle: null,\n            startPosition: null,\n            brushDomain,\n            activeBrushes\n          };\n          if (allowResize && Helpers.isFunction(onBrushDomainChange)) {\n            onBrushDomainChange(brushDomain, _defaults({}, mutatedProps, targetProps));\n          }\n          return [{\n            mutation: () => mutatedProps\n          }];\n        },\n        onMouseLeave: (evt, targetProps) => {\n          const {\n            brushDomain\n          } = targetProps;\n          return [{\n            mutation: () => ({\n              isPanning: false,\n              isSelecting: false,\n              activeHandle: null,\n              startPosition: null,\n              brushDomain,\n              activeBrushes: {}\n            })\n          }];\n        }\n      }\n    }];\n  };\n  getRectDimensions(props, brushWidth, domain) {\n    const {\n      brushDomain\n    } = props;\n    const dimension = getDimension(props);\n    const range = toRange(props, domain || getBrushDomain(brushDomain, getFullDomain(props)));\n    const coordinates = dimension === \"x\" ? {\n      y1: props.y1,\n      y2: props.y2,\n      x1: Math.min(...range),\n      x2: Math.max(...range)\n    } : {\n      x1: props.x1,\n      x2: props.x2,\n      y1: Math.min(...range),\n      y2: Math.max(...range)\n    };\n    const {\n      x1,\n      x2,\n      y1,\n      y2\n    } = coordinates;\n    const offset = {\n      x: dimension === \"x\" ? 0 : brushWidth / 2,\n      y: dimension === \"y\" ? 0 : brushWidth / 2\n    };\n    const x = Math.min(x1, x2) - offset.x;\n    const y = Math.min(y1, y2) - offset.y;\n    const width = Math.max(x1, x2) + offset.x - x;\n    const height = Math.max(y1, y2) + offset.y - y;\n    return {\n      x,\n      y,\n      width,\n      height\n    };\n  }\n  getHandleDimensions(props) {\n    const {\n      handleWidth,\n      x1,\n      x2,\n      y1,\n      y2,\n      brushDomain\n    } = props;\n    const dimension = getDimension(props);\n    const brushWidth = props.brushWidth || props.width;\n    const domain = getBrushDomain(brushDomain, getFullDomain(props));\n    const range = toRange(props, domain);\n    const defaultX = Math.min(x1, x2) - brushWidth / 2;\n    const defaultY = Math.min(y1, y2) - brushWidth / 2;\n    const x = {\n      min: dimension === \"x\" ? Math.min(...range) - handleWidth / 2 : defaultX,\n      max: dimension === \"x\" ? Math.max(...range) - handleWidth / 2 : defaultX\n    };\n    const y = {\n      min: dimension === \"y\" ? Math.max(...range) - handleWidth / 2 : defaultY,\n      max: dimension === \"y\" ? Math.min(...range) - handleWidth / 2 : defaultY\n    };\n    const width = dimension === \"x\" ? handleWidth : brushWidth;\n    const height = dimension === \"x\" ? brushWidth : handleWidth;\n    return {\n      min: {\n        x: x.min,\n        y: y.min,\n        width,\n        height\n      },\n      max: {\n        x: x.max,\n        y: y.max,\n        width,\n        height\n      }\n    };\n  }\n  getCursor(props) {\n    const {\n      activeBrushes = {}\n    } = props;\n    const dimension = getDimension(props);\n    if (activeBrushes.minHandle || activeBrushes.maxHandle) {\n      return dimension === \"x\" ? \"ew-resize\" : \"ns-resize\";\n    } else if (activeBrushes.brush) {\n      return \"move\";\n    }\n    return \"crosshair\";\n  }\n  renderHandles(props) {\n    const {\n      handleComponent,\n      handleStyle,\n      id,\n      brushDomain,\n      datum = {},\n      activeBrushes = {}\n    } = props;\n    if (!brushDomain) {\n      return null;\n    }\n    const handleDimensions = this.getHandleDimensions(props);\n    const style = Object.assign({}, fallbackProps.handleStyle, handleStyle);\n    const minDatum = Object.assign({\n      handleValue: Collection.getMinValue(brushDomain)\n    }, datum);\n    const maxDatum = Object.assign({\n      handleValue: Collection.getMaxValue(brushDomain)\n    }, datum);\n    const minHandleProps = Object.assign({\n      key: `${id}-min`,\n      style: Helpers.evaluateStyle(style, {\n        datum: minDatum,\n        active: activeBrushes.minHandle\n      })\n    }, handleDimensions.min);\n    const maxHandleProps = Object.assign({\n      key: `${id}-max`,\n      style: Helpers.evaluateStyle(style, {\n        datum: maxDatum,\n        active: activeBrushes.maxHandle\n      })\n    }, handleDimensions.max);\n    return [/*#__PURE__*/React.cloneElement(handleComponent, minHandleProps), /*#__PURE__*/React.cloneElement(handleComponent, maxHandleProps)];\n  }\n  renderBrush(props) {\n    const {\n      brushComponent,\n      brushStyle,\n      activeBrushes = {},\n      datum = {},\n      brushDomain\n    } = props;\n    if (!brushDomain) {\n      return null;\n    }\n    const brushWidth = props.brushWidth || props.width;\n    const rectDimensions = this.getRectDimensions(props, brushWidth);\n    const baseStyle = Object.assign({}, fallbackProps.brushStyle, brushStyle);\n    const style = Helpers.evaluateStyle(baseStyle, {\n      datum,\n      active: activeBrushes.brush\n    });\n    const brushProps = Object.assign({\n      style\n    }, rectDimensions);\n    return /*#__PURE__*/React.cloneElement(brushComponent, brushProps);\n  }\n  renderBrushArea(props) {\n    const {\n      brushAreaComponent,\n      brushAreaStyle,\n      activeBrushes = {},\n      datum = {}\n    } = props;\n    const brushAreaWidth = props.brushAreaWidth || props.width;\n    const cursor = this.getCursor(props);\n    const rectDimensions = this.getRectDimensions(props, brushAreaWidth, getFullDomain(props));\n    const baseStyle = Object.assign({\n      cursor\n    }, fallbackProps.brushAreaStyle, brushAreaStyle);\n    const style = Helpers.evaluateStyle(baseStyle, {\n      datum,\n      active: activeBrushes.brushArea\n    });\n    const brushAreaProps = Object.assign({\n      style\n    }, rectDimensions);\n    return /*#__PURE__*/React.cloneElement(brushAreaComponent, brushAreaProps);\n  }\n  renderLine(props) {\n    const filteredProps = _pick(props, [\"x1\", \"x2\", \"y1\", \"y2\", \"datum\", \"scale\", \"active\", \"style\"]);\n    return /*#__PURE__*/React.cloneElement(props.lineComponent, filteredProps);\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(\"g\", this.props.events, this.renderLine(this.props), this.renderBrushArea(this.props), this.renderBrush(this.props), this.renderHandles(this.props));\n  }\n}","map":{"version":3,"names":["_pick","_defaults","React","Selection","Helpers","Collection","LineSegment","Scale","Domain","Box","isEqual","SMALL_NUMBER","Number","MAX_SAFE_INTEGER","getScale","props","scale","dimension","fallbackScale","getBaseScale","range","getRange","domain","getDomainFromProps","getDimension","horizontal","toRange","Math","min","max","toDomain","invert","getFullRange","getFullDomain","withinBound","value","bound","getMinValue","getMaxValue","getBrushDomain","brushDomain","fullDomain","brushMin","brushMax","domainMin","domainMax","defaultMin","defaultMax","getActiveHandle","position","width","handleWidth","getHandle","type","base","active","reduce","memo","undefined","getMinimumDomain","panBox","startPosition","fullRange","size","abs","globalMin","globalMax","delta","constrainedMin","constrainedMax","fallbackProps","brushAreaStyle","stroke","fill","opacity","_ref","brushStyle","pointerEvents","_ref2","handleStyle","VictoryBrushLine","Component","defaultProps","allowDrag","allowDraw","allowResize","brushAreaComponent","createElement","brushComponent","groupComponent","handleComponent","lineComponent","defaultEvents","disable","target","eventHandlers","onMouseEnter","evt","targetProps","preventDefault","parentSVG","getParentSVG","getSVGEventCoordinates","currentDomain","activeHandle","activeBrushes","brushArea","brush","minHandle","maxHandle","mutation","onMouseDown","isSelecting","isPanning","onMouseMove","onBrushDomainChange","stopPropagation","initialRange","mutatedProps","isFunction","oppositeHandle","handle","rangeMax","rangeMin","onMouseUp","onMouseLeave","getRectDimensions","brushWidth","coordinates","y1","y2","x1","x2","offset","x","y","height","getHandleDimensions","defaultX","defaultY","getCursor","renderHandles","id","datum","handleDimensions","style","Object","assign","minDatum","handleValue","maxDatum","minHandleProps","key","evaluateStyle","maxHandleProps","cloneElement","renderBrush","rectDimensions","baseStyle","brushProps","renderBrushArea","brushAreaWidth","cursor","brushAreaProps","renderLine","filteredProps","render","events"],"sources":["/Users/anjalichaturvedi/GitHub/brew-bridge-dashboard/website/node_modules/victory-brush-line/es/victory-brush-line.js"],"sourcesContent":["import _pick from \"lodash/pick\";\nimport _defaults from \"lodash/defaults\";\nimport React from \"react\";\nimport { Selection, Helpers, Collection, LineSegment, Scale, Domain, Box } from \"victory-core\";\nimport isEqual from \"react-fast-compare\";\nconst SMALL_NUMBER = 1 / Number.MAX_SAFE_INTEGER;\nconst getScale = props => {\n  const {\n    scale = {},\n    dimension = \"x\"\n  } = props;\n  if (scale[dimension]) {\n    return scale[dimension];\n  }\n  const fallbackScale = Scale.getBaseScale(props, dimension);\n  const range = Helpers.getRange(props, dimension);\n  const domain = Domain.getDomainFromProps(props, dimension) || [0, 1];\n  fallbackScale.range(range).domain(domain);\n  return fallbackScale;\n};\nconst getDimension = props => {\n  const {\n    horizontal,\n    dimension = \"x\"\n  } = props;\n  if (!horizontal) {\n    return dimension;\n  }\n  return dimension === \"x\" ? \"y\" : \"x\";\n};\nconst toRange = (props, domain) => {\n  const scale = getScale(props);\n  return [scale(Math.min(...domain)), scale(Math.max(...domain))];\n};\nconst toDomain = (props, range) => {\n  const scale = getScale(props);\n  return [scale.invert(Math.min(...range)), scale.invert(Math.max(...range))];\n};\nconst getFullRange = props => {\n  const scale = getScale(props);\n  return scale.range();\n};\nconst getFullDomain = props => {\n  const scale = getScale(props);\n  return scale.domain();\n};\nconst withinBound = (value, bound) => {\n  return value >= Collection.getMinValue(bound) && value <= Collection.getMaxValue(bound);\n};\nconst getBrushDomain = (brushDomain, fullDomain) => {\n  if (brushDomain) {\n    const brushMin = Collection.getMinValue(brushDomain);\n    const brushMax = Collection.getMaxValue(brushDomain);\n    const domainMin = Collection.getMinValue(fullDomain);\n    const domainMax = Collection.getMaxValue(fullDomain);\n    const defaultMin = brushMin < domainMin ? domainMin : Number(domainMax) - SMALL_NUMBER;\n    const defaultMax = brushMax > domainMax ? domainMax : Number(domainMin) + SMALL_NUMBER;\n    const min = withinBound(brushMin, fullDomain) ? brushMin : defaultMin;\n    const max = withinBound(brushMax, fullDomain) ? brushMax : defaultMax;\n    return [min, max];\n  }\n  return fullDomain;\n};\nconst getActiveHandle = (props, position, range) => {\n  const width = props.handleWidth / 2;\n  const dimension = getDimension(props);\n  const getHandle = type => {\n    const base = {\n      min: dimension === \"x\" ? Math.min(...range) : Math.max(...range),\n      max: dimension === \"x\" ? Math.max(...range) : Math.min(...range)\n    };\n    return [base[type] - width, base[type] + width];\n  };\n  const active = [\"min\", \"max\"].reduce((memo, type) => {\n    memo[type] = withinBound(position, getHandle(type)) ? type : undefined;\n    return memo;\n  }, {});\n  return active.min && active.max ? \"both\" : active.min || active.max;\n};\nconst getMinimumDomain = () => {\n  return [0, SMALL_NUMBER];\n};\nconst panBox = (props, position) => {\n  const {\n    brushDomain,\n    startPosition\n  } = props;\n  const range = toRange(props, brushDomain);\n  const fullRange = getFullRange(props);\n  const size = Math.abs(range[1] - range[0]);\n  const globalMin = Math.min(...fullRange);\n  const globalMax = Math.max(...fullRange);\n  const delta = startPosition ? startPosition - position : 0;\n  const min = Math.min(...range) - delta;\n  const max = Math.max(...range) - delta;\n  const constrainedMin = min > globalMax - size ? globalMax - size : Math.max(min, globalMin);\n  const constrainedMax = max < globalMin + size ? globalMin + size : Math.min(max, globalMax);\n  return [constrainedMin, constrainedMax];\n};\nconst fallbackProps = {\n  brushAreaStyle: {\n    stroke: \"none\",\n    fill: \"black\",\n    opacity: _ref => {\n      let {\n        active\n      } = _ref;\n      return active ? 0.2 : 0.1;\n    } // eslint-disable-line no-magic-numbers\n  },\n  brushStyle: {\n    pointerEvents: \"none\",\n    stroke: \"none\",\n    fill: \"black\",\n    opacity: _ref2 => {\n      let {\n        active\n      } = _ref2;\n      return active ? 0.4 : 0.3;\n    } // eslint-disable-line no-magic-numbers\n  },\n  handleStyle: {\n    pointerEvents: \"none\",\n    stroke: \"none\",\n    fill: \"none\"\n  }\n};\nexport class VictoryBrushLine extends React.Component {\n  static defaultProps = {\n    allowDrag: true,\n    allowDraw: true,\n    allowResize: true,\n    brushAreaComponent: /*#__PURE__*/React.createElement(Box, null),\n    brushComponent: /*#__PURE__*/React.createElement(Box, null),\n    groupComponent: /*#__PURE__*/React.createElement(\"g\", null),\n    handleComponent: /*#__PURE__*/React.createElement(Box, null),\n    handleWidth: 10,\n    lineComponent: /*#__PURE__*/React.createElement(LineSegment, null),\n    width: 10\n  };\n  static defaultEvents = function (props) {\n    return props.disable ? undefined : [{\n      target: props.type,\n      eventHandlers: {\n        onMouseEnter: (evt, targetProps) => {\n          evt.preventDefault();\n          const {\n            allowResize,\n            brushDomain\n          } = targetProps;\n          const dimension = getDimension(targetProps);\n          const parentSVG = targetProps.parentSVG || Selection.getParentSVG(evt);\n          const position = Selection.getSVGEventCoordinates(evt, parentSVG)[dimension];\n          const fullDomain = getFullDomain(targetProps);\n          const currentDomain = getBrushDomain(brushDomain, fullDomain);\n          const range = toRange(targetProps, currentDomain);\n          const activeHandle = allowResize && getActiveHandle(targetProps, position, range);\n          const activeBrushes = {\n            brushArea: !targetProps.brushDomain,\n            brush: withinBound(position, range) && !isEqual(fullDomain, currentDomain),\n            minHandle: activeHandle === \"min\" || activeHandle === \"both\",\n            maxHandle: activeHandle === \"min\" || activeHandle === \"both\"\n          };\n          return [{\n            mutation: () => ({\n              activeBrushes,\n              brushDomain: targetProps.brushDomain,\n              parentSVG\n            })\n          }];\n        },\n        onMouseDown: (evt, targetProps) => {\n          evt.preventDefault();\n          const {\n            allowResize,\n            allowDrag,\n            allowDraw,\n            activeBrushes,\n            brushDomain\n          } = targetProps;\n          const dimension = getDimension(targetProps);\n\n          // Don't trigger events for static brushes\n          if (!allowResize && !allowDrag) {\n            return [];\n          }\n          const fullDomain = getFullDomain(targetProps);\n          const currentDomain = getBrushDomain(brushDomain, fullDomain);\n          const parentSVG = targetProps.parentSVG || Selection.getParentSVG(evt);\n          const position = Selection.getSVGEventCoordinates(evt, parentSVG)[dimension];\n          const range = toRange(targetProps, currentDomain);\n          const activeHandle = allowResize && getActiveHandle(targetProps, position, range);\n          // If the event occurs in any of the handle regions, start a resize\n          if (activeHandle) {\n            return [{\n              mutation: () => {\n                return {\n                  parentSVG,\n                  isSelecting: true,\n                  activeHandle,\n                  brushDomain: currentDomain,\n                  startPosition: position,\n                  activeBrushes\n                };\n              }\n            }];\n          } else if (withinBound(position, range) && !isEqual(fullDomain, currentDomain)) {\n            // if the event occurs within a selected region start a panning event, unless the whole\n            // domain is selected\n            return [{\n              mutation: () => ({\n                isPanning: allowDrag,\n                startPosition: position,\n                brushDomain: currentDomain,\n                activeBrushes,\n                parentSVG\n              })\n            }];\n          }\n          // if the event occurs outside the region, or if the whole domain is selected,\n          // start a new selection\n          return allowDraw ? [{\n            mutation: () => ({\n              isSelecting: allowResize,\n              brushDomain: null,\n              startPosition: position,\n              activeBrushes,\n              parentSVG\n            })\n          }] : [];\n        },\n        // eslint-disable-next-line max-statements, complexity\n        onMouseMove: (evt, targetProps) => {\n          const {\n            isPanning,\n            isSelecting,\n            allowResize,\n            allowDrag,\n            onBrushDomainChange,\n            brushDomain\n          } = targetProps;\n          const dimension = getDimension(targetProps);\n          if (isPanning || isSelecting) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n          const parentSVG = targetProps.parentSVG || Selection.getParentSVG(evt);\n          const position = Selection.getSVGEventCoordinates(evt, parentSVG)[dimension];\n          const fullDomain = getFullDomain(targetProps);\n          const domain = getBrushDomain(brushDomain, fullDomain);\n          const initialRange = toRange(targetProps, domain);\n          const activeHandle = getActiveHandle(targetProps, position, initialRange);\n          const activeBrushes = {\n            brushArea: !targetProps.brushDomain,\n            brush: withinBound(position, initialRange) && !isEqual(fullDomain, domain),\n            minHandle: activeHandle === \"min\" || activeHandle === \"both\",\n            maxHandle: activeHandle === \"max\" || activeHandle === \"both\"\n          };\n          if (!targetProps.isPanning && !targetProps.isSelecting) {\n            return [{\n              mutation: () => ({\n                activeBrushes,\n                brushDomain: targetProps.brushDomain,\n                parentSVG\n              })\n            }];\n          }\n          if (allowDrag && isPanning) {\n            const fullRange = getFullRange(targetProps);\n            const range = panBox(targetProps, position);\n            const currentDomain = toDomain(targetProps, range);\n            const startPosition = Math.max(...range) >= Math.max(...fullRange) || Math.min(...range) <= Math.min(...fullRange) ? targetProps.startPosition : position;\n            const mutatedProps = {\n              startPosition,\n              isPanning: true,\n              brushDomain: currentDomain,\n              activeBrushes: {\n                brush: true\n              },\n              parentSVG\n            };\n            if (Helpers.isFunction(onBrushDomainChange)) {\n              onBrushDomainChange(currentDomain, _defaults({}, mutatedProps, targetProps));\n            }\n            return [{\n              mutation: () => mutatedProps\n            }];\n          } else if (allowResize && isSelecting) {\n            let currentDomain = brushDomain || getMinimumDomain();\n            const range = toRange(targetProps, currentDomain);\n            const oppositeHandle = targetProps.activeHandle === \"min\" ? \"max\" : \"min\";\n            const handle = targetProps.activeHandle && getActiveHandle(targetProps, position, range) === \"both\" ? oppositeHandle : targetProps.activeHandle;\n            if (!handle) {\n              currentDomain = toDomain(targetProps, [targetProps.startPosition, position]);\n            } else {\n              const rangeMax = dimension === \"x\" ? Math.max(...range) : Math.min(...range);\n              const rangeMin = dimension === \"x\" ? Math.min(...range) : Math.max(...range);\n              const min = handle === \"max\" ? rangeMin : position;\n              const max = handle === \"min\" ? rangeMax : position;\n              currentDomain = toDomain(targetProps, [min, max]);\n            }\n            const mutatedProps = {\n              brushDomain: currentDomain,\n              startPosition: targetProps.startPosition,\n              isSelecting,\n              activeHandle: handle,\n              parentSVG,\n              activeBrushes: {\n                brush: true,\n                minHandle: activeHandle === \"min\",\n                maxHandle: activeHandle === \"max\"\n              }\n            };\n            if (Helpers.isFunction(onBrushDomainChange)) {\n              onBrushDomainChange(currentDomain, _defaults({}, mutatedProps, targetProps));\n            }\n            return [{\n              mutation: () => mutatedProps\n            }];\n          }\n          return [];\n        },\n        onMouseUp: (evt, targetProps) => {\n          const {\n            onBrushDomainChange,\n            brushDomain,\n            allowResize,\n            activeBrushes\n          } = targetProps;\n          // if the mouse hasn't moved since a mouseDown event, select the whole domain region\n          const mutatedProps = {\n            isPanning: false,\n            isSelecting: false,\n            activeHandle: null,\n            startPosition: null,\n            brushDomain,\n            activeBrushes\n          };\n          if (allowResize && Helpers.isFunction(onBrushDomainChange)) {\n            onBrushDomainChange(brushDomain, _defaults({}, mutatedProps, targetProps));\n          }\n          return [{\n            mutation: () => mutatedProps\n          }];\n        },\n        onMouseLeave: (evt, targetProps) => {\n          const {\n            brushDomain\n          } = targetProps;\n          return [{\n            mutation: () => ({\n              isPanning: false,\n              isSelecting: false,\n              activeHandle: null,\n              startPosition: null,\n              brushDomain,\n              activeBrushes: {}\n            })\n          }];\n        }\n      }\n    }];\n  };\n  getRectDimensions(props, brushWidth, domain) {\n    const {\n      brushDomain\n    } = props;\n    const dimension = getDimension(props);\n    const range = toRange(props, domain || getBrushDomain(brushDomain, getFullDomain(props)));\n    const coordinates = dimension === \"x\" ? {\n      y1: props.y1,\n      y2: props.y2,\n      x1: Math.min(...range),\n      x2: Math.max(...range)\n    } : {\n      x1: props.x1,\n      x2: props.x2,\n      y1: Math.min(...range),\n      y2: Math.max(...range)\n    };\n    const {\n      x1,\n      x2,\n      y1,\n      y2\n    } = coordinates;\n    const offset = {\n      x: dimension === \"x\" ? 0 : brushWidth / 2,\n      y: dimension === \"y\" ? 0 : brushWidth / 2\n    };\n    const x = Math.min(x1, x2) - offset.x;\n    const y = Math.min(y1, y2) - offset.y;\n    const width = Math.max(x1, x2) + offset.x - x;\n    const height = Math.max(y1, y2) + offset.y - y;\n    return {\n      x,\n      y,\n      width,\n      height\n    };\n  }\n  getHandleDimensions(props) {\n    const {\n      handleWidth,\n      x1,\n      x2,\n      y1,\n      y2,\n      brushDomain\n    } = props;\n    const dimension = getDimension(props);\n    const brushWidth = props.brushWidth || props.width;\n    const domain = getBrushDomain(brushDomain, getFullDomain(props));\n    const range = toRange(props, domain);\n    const defaultX = Math.min(x1, x2) - brushWidth / 2;\n    const defaultY = Math.min(y1, y2) - brushWidth / 2;\n    const x = {\n      min: dimension === \"x\" ? Math.min(...range) - handleWidth / 2 : defaultX,\n      max: dimension === \"x\" ? Math.max(...range) - handleWidth / 2 : defaultX\n    };\n    const y = {\n      min: dimension === \"y\" ? Math.max(...range) - handleWidth / 2 : defaultY,\n      max: dimension === \"y\" ? Math.min(...range) - handleWidth / 2 : defaultY\n    };\n    const width = dimension === \"x\" ? handleWidth : brushWidth;\n    const height = dimension === \"x\" ? brushWidth : handleWidth;\n    return {\n      min: {\n        x: x.min,\n        y: y.min,\n        width,\n        height\n      },\n      max: {\n        x: x.max,\n        y: y.max,\n        width,\n        height\n      }\n    };\n  }\n  getCursor(props) {\n    const {\n      activeBrushes = {}\n    } = props;\n    const dimension = getDimension(props);\n    if (activeBrushes.minHandle || activeBrushes.maxHandle) {\n      return dimension === \"x\" ? \"ew-resize\" : \"ns-resize\";\n    } else if (activeBrushes.brush) {\n      return \"move\";\n    }\n    return \"crosshair\";\n  }\n  renderHandles(props) {\n    const {\n      handleComponent,\n      handleStyle,\n      id,\n      brushDomain,\n      datum = {},\n      activeBrushes = {}\n    } = props;\n    if (!brushDomain) {\n      return null;\n    }\n    const handleDimensions = this.getHandleDimensions(props);\n    const style = Object.assign({}, fallbackProps.handleStyle, handleStyle);\n    const minDatum = Object.assign({\n      handleValue: Collection.getMinValue(brushDomain)\n    }, datum);\n    const maxDatum = Object.assign({\n      handleValue: Collection.getMaxValue(brushDomain)\n    }, datum);\n    const minHandleProps = Object.assign({\n      key: `${id}-min`,\n      style: Helpers.evaluateStyle(style, {\n        datum: minDatum,\n        active: activeBrushes.minHandle\n      })\n    }, handleDimensions.min);\n    const maxHandleProps = Object.assign({\n      key: `${id}-max`,\n      style: Helpers.evaluateStyle(style, {\n        datum: maxDatum,\n        active: activeBrushes.maxHandle\n      })\n    }, handleDimensions.max);\n    return [/*#__PURE__*/React.cloneElement(handleComponent, minHandleProps), /*#__PURE__*/React.cloneElement(handleComponent, maxHandleProps)];\n  }\n  renderBrush(props) {\n    const {\n      brushComponent,\n      brushStyle,\n      activeBrushes = {},\n      datum = {},\n      brushDomain\n    } = props;\n    if (!brushDomain) {\n      return null;\n    }\n    const brushWidth = props.brushWidth || props.width;\n    const rectDimensions = this.getRectDimensions(props, brushWidth);\n    const baseStyle = Object.assign({}, fallbackProps.brushStyle, brushStyle);\n    const style = Helpers.evaluateStyle(baseStyle, {\n      datum,\n      active: activeBrushes.brush\n    });\n    const brushProps = Object.assign({\n      style\n    }, rectDimensions);\n    return /*#__PURE__*/React.cloneElement(brushComponent, brushProps);\n  }\n  renderBrushArea(props) {\n    const {\n      brushAreaComponent,\n      brushAreaStyle,\n      activeBrushes = {},\n      datum = {}\n    } = props;\n    const brushAreaWidth = props.brushAreaWidth || props.width;\n    const cursor = this.getCursor(props);\n    const rectDimensions = this.getRectDimensions(props, brushAreaWidth, getFullDomain(props));\n    const baseStyle = Object.assign({\n      cursor\n    }, fallbackProps.brushAreaStyle, brushAreaStyle);\n    const style = Helpers.evaluateStyle(baseStyle, {\n      datum,\n      active: activeBrushes.brushArea\n    });\n    const brushAreaProps = Object.assign({\n      style\n    }, rectDimensions);\n    return /*#__PURE__*/React.cloneElement(brushAreaComponent, brushAreaProps);\n  }\n  renderLine(props) {\n    const filteredProps = _pick(props, [\"x1\", \"x2\", \"y1\", \"y2\", \"datum\", \"scale\", \"active\", \"style\"]);\n    return /*#__PURE__*/React.cloneElement(props.lineComponent, filteredProps);\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(\"g\", this.props.events, this.renderLine(this.props), this.renderBrushArea(this.props), this.renderBrush(this.props), this.renderHandles(this.props));\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}