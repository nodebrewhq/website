{"ast":null,"code":"import * as React from \"react\";\nimport { evaluateProp } from \"./helpers\";\n\n/*\n  USER_PROPS_SAFELIST is to contain any string deemed safe for user props.\n  The startsWidth array will contain the start of any accepted user-prop that\n  starts with these characters.\n  The exactMatch will contain a list of exact prop names that are accepted.\n*/\nconst USER_PROPS_SAFELIST = {\n  startsWith: [\"data-\", \"aria-\"],\n  exactMatch: []\n};\n\n// Normally we'd use Template Literal Types, but we're avoiding it to maximize TS compatibility with TS < 4.1\n\n// `data-${string}` | `aria-${string}`;\n\n/**\n * doesPropStartWith: Function that takes a prop's key and runs it against all\n * options in the USER_PROPS_SAFELIST and checks to see if it starts with any\n * of those options.\n * @param {string} key: prop key to be tested against whitelist\n * @returns {Boolean}: returns true if the key starts with an option or false if\n * otherwise\n */\nconst doesPropStartWith = key => {\n  let startsWith = false;\n  USER_PROPS_SAFELIST.startsWith.forEach(starterString => {\n    const regex = new RegExp(`\\\\b(${starterString})(\\\\w|-)+`, \"g\");\n    if (regex.test(key)) startsWith = true;\n  });\n  return startsWith;\n};\n\n/**\n * isExactMatch: checks to see if the given key matches any of the 'exactMatch'\n * items in the whitelist\n * @param {String} key: prop key to be tested against the whitelist-exact match\n * array.\n * @returns {Boolean}: return true if whitelist contains that key, otherwise\n * returns false.\n */\nconst isExactMatch = key => USER_PROPS_SAFELIST.exactMatch.includes(key);\n\n/**\n * testIfSafeProp: tests prop's key against both startsWith and exactMatch values\n * @param {String} key: prop key to be tested against the whitelist\n * @returns {Boolean}: returns true if found in whitelist, otherwise returns false\n */\nconst testIfSafeProp = key => {\n  if (doesPropStartWith(key) || isExactMatch(key)) return true;\n  return false;\n};\n\n/**\n * Asserts that value is not null or undefined, throwing an error if it is.\n * @param value The value to assert\n * @param message The error message to throw\n */\nexport function assert(value, message) {\n  if (value === undefined || value === null) {\n    throw new Error(message);\n  }\n}\n\n/**\n * getSafeUserProps - function that takes in a props object and removes any\n * key-value entries that do not match filter strings in the USER_PROPS_SAFELIST\n * object.\n *\n * @param {Object} props: props to be filtered against USER_PROPS_SAFELIST\n * @returns {Object}: object containing remaining acceptable props\n */\nexport const getSafeUserProps = props => {\n  const propsToFilter = {\n    ...props\n  };\n  return Object.fromEntries(Object.entries(propsToFilter).filter(_ref => {\n    let [key] = _ref;\n    return testIfSafeProp(key);\n  }).map(_ref2 => {\n    let [key, value] = _ref2;\n    return [key, evaluateProp(value, props)];\n  }));\n};\n\n/**\n * Wraps a component and adds safe user props\n *\n * @param {ReactElement} component: parent component\n * @param {Object} props: props to be filtered\n * @returns {ReactElement} modified component\n */\nexport const withSafeUserProps = (component, props) => {\n  return /*#__PURE__*/React.cloneElement(component, getSafeUserProps(props));\n};","map":{"version":3,"names":["React","evaluateProp","USER_PROPS_SAFELIST","startsWith","exactMatch","doesPropStartWith","key","forEach","starterString","regex","RegExp","test","isExactMatch","includes","testIfSafeProp","assert","value","message","undefined","Error","getSafeUserProps","props","propsToFilter","Object","fromEntries","entries","filter","_ref","map","_ref2","withSafeUserProps","component","cloneElement"],"sources":["/Users/anjalichaturvedi/GitHub/brew-bridge-dashboard/website/node_modules/victory-core/es/victory-util/user-props.js"],"sourcesContent":["import * as React from \"react\";\nimport { evaluateProp } from \"./helpers\";\n\n/*\n  USER_PROPS_SAFELIST is to contain any string deemed safe for user props.\n  The startsWidth array will contain the start of any accepted user-prop that\n  starts with these characters.\n  The exactMatch will contain a list of exact prop names that are accepted.\n*/\nconst USER_PROPS_SAFELIST = {\n  startsWith: [\"data-\", \"aria-\"],\n  exactMatch: []\n};\n\n// Normally we'd use Template Literal Types, but we're avoiding it to maximize TS compatibility with TS < 4.1\n\n// `data-${string}` | `aria-${string}`;\n\n/**\n * doesPropStartWith: Function that takes a prop's key and runs it against all\n * options in the USER_PROPS_SAFELIST and checks to see if it starts with any\n * of those options.\n * @param {string} key: prop key to be tested against whitelist\n * @returns {Boolean}: returns true if the key starts with an option or false if\n * otherwise\n */\nconst doesPropStartWith = key => {\n  let startsWith = false;\n  USER_PROPS_SAFELIST.startsWith.forEach(starterString => {\n    const regex = new RegExp(`\\\\b(${starterString})(\\\\w|-)+`, \"g\");\n    if (regex.test(key)) startsWith = true;\n  });\n  return startsWith;\n};\n\n/**\n * isExactMatch: checks to see if the given key matches any of the 'exactMatch'\n * items in the whitelist\n * @param {String} key: prop key to be tested against the whitelist-exact match\n * array.\n * @returns {Boolean}: return true if whitelist contains that key, otherwise\n * returns false.\n */\nconst isExactMatch = key => USER_PROPS_SAFELIST.exactMatch.includes(key);\n\n/**\n * testIfSafeProp: tests prop's key against both startsWith and exactMatch values\n * @param {String} key: prop key to be tested against the whitelist\n * @returns {Boolean}: returns true if found in whitelist, otherwise returns false\n */\nconst testIfSafeProp = key => {\n  if (doesPropStartWith(key) || isExactMatch(key)) return true;\n  return false;\n};\n\n/**\n * Asserts that value is not null or undefined, throwing an error if it is.\n * @param value The value to assert\n * @param message The error message to throw\n */\nexport function assert(value, message) {\n  if (value === undefined || value === null) {\n    throw new Error(message);\n  }\n}\n\n/**\n * getSafeUserProps - function that takes in a props object and removes any\n * key-value entries that do not match filter strings in the USER_PROPS_SAFELIST\n * object.\n *\n * @param {Object} props: props to be filtered against USER_PROPS_SAFELIST\n * @returns {Object}: object containing remaining acceptable props\n */\nexport const getSafeUserProps = props => {\n  const propsToFilter = {\n    ...props\n  };\n  return Object.fromEntries(Object.entries(propsToFilter).filter(_ref => {\n    let [key] = _ref;\n    return testIfSafeProp(key);\n  }).map(_ref2 => {\n    let [key, value] = _ref2;\n    return [key, evaluateProp(value, props)];\n  }));\n};\n\n/**\n * Wraps a component and adds safe user props\n *\n * @param {ReactElement} component: parent component\n * @param {Object} props: props to be filtered\n * @returns {ReactElement} modified component\n */\nexport const withSafeUserProps = (component, props) => {\n  return /*#__PURE__*/React.cloneElement(component, getSafeUserProps(props));\n};"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,YAAY,QAAQ,WAAW;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG;EAC1BC,UAAU,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;EAC9BC,UAAU,EAAE;AACd,CAAC;;AAED;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAGC,GAAG,IAAI;EAC/B,IAAIH,UAAU,GAAG,KAAK;EACtBD,mBAAmB,CAACC,UAAU,CAACI,OAAO,CAACC,aAAa,IAAI;IACtD,MAAMC,KAAK,GAAG,IAAIC,MAAM,CAAC,OAAOF,aAAa,WAAW,EAAE,GAAG,CAAC;IAC9D,IAAIC,KAAK,CAACE,IAAI,CAACL,GAAG,CAAC,EAAEH,UAAU,GAAG,IAAI;EACxC,CAAC,CAAC;EACF,OAAOA,UAAU;AACnB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMS,YAAY,GAAGN,GAAG,IAAIJ,mBAAmB,CAACE,UAAU,CAACS,QAAQ,CAACP,GAAG,CAAC;;AAExE;AACA;AACA;AACA;AACA;AACA,MAAMQ,cAAc,GAAGR,GAAG,IAAI;EAC5B,IAAID,iBAAiB,CAACC,GAAG,CAAC,IAAIM,YAAY,CAACN,GAAG,CAAC,EAAE,OAAO,IAAI;EAC5D,OAAO,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,SAASS,MAAMA,CAACC,KAAK,EAAEC,OAAO,EAAE;EACrC,IAAID,KAAK,KAAKE,SAAS,IAAIF,KAAK,KAAK,IAAI,EAAE;IACzC,MAAM,IAAIG,KAAK,CAACF,OAAO,CAAC;EAC1B;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,gBAAgB,GAAGC,KAAK,IAAI;EACvC,MAAMC,aAAa,GAAG;IACpB,GAAGD;EACL,CAAC;EACD,OAAOE,MAAM,CAACC,WAAW,CAACD,MAAM,CAACE,OAAO,CAACH,aAAa,CAAC,CAACI,MAAM,CAACC,IAAI,IAAI;IACrE,IAAI,CAACrB,GAAG,CAAC,GAAGqB,IAAI;IAChB,OAAOb,cAAc,CAACR,GAAG,CAAC;EAC5B,CAAC,CAAC,CAACsB,GAAG,CAACC,KAAK,IAAI;IACd,IAAI,CAACvB,GAAG,EAAEU,KAAK,CAAC,GAAGa,KAAK;IACxB,OAAO,CAACvB,GAAG,EAAEL,YAAY,CAACe,KAAK,EAAEK,KAAK,CAAC,CAAC;EAC1C,CAAC,CAAC,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMS,iBAAiB,GAAGA,CAACC,SAAS,EAAEV,KAAK,KAAK;EACrD,OAAO,aAAarB,KAAK,CAACgC,YAAY,CAACD,SAAS,EAAEX,gBAAgB,CAACC,KAAK,CAAC,CAAC;AAC5E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}