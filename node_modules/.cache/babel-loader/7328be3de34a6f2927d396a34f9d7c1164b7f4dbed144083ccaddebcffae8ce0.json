{"ast":null,"code":"import _omitBy from \"lodash/omitBy\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport _isEqual from \"lodash/isEqual\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _orderBy from \"lodash/orderBy\";\nimport _property from \"lodash/property\";\nimport _isPlainObject from \"lodash/isPlainObject\";\nimport _uniq from \"lodash/uniq\";\n/* eslint-disable no-use-before-define */\nimport React from \"react\";\nimport * as Helpers from \"./helpers\";\nimport * as Collection from \"./collection\";\nimport * as Scale from \"./scale\";\nimport * as Immutable from \"./immutable\";\n\n// Private Functions\n\nfunction parseDatum(datum) {\n  const immutableDatumWhitelist = {\n    errorX: true,\n    errorY: true\n  };\n  return Immutable.isImmutable(datum) ? Immutable.shallowToJS(datum, immutableDatumWhitelist) : datum;\n}\nfunction getLength(data) {\n  return Immutable.isIterable(data) ? data.size : data.length;\n}\n\n// Returns generated data for a given axis based on domain and sample from props\nfunction generateDataArray(props, axis) {\n  const propsDomain = _isPlainObject(props.domain) ? props.domain[axis] : props.domain;\n  const domain = propsDomain || Scale.getBaseScale(props, axis).domain();\n  const samples = props.samples || 1;\n  const domainMax = Math.max(...domain);\n  const domainMin = Math.min(...domain);\n  const step = (domainMax - domainMin) / samples;\n  const values = Helpers.range(domainMin, domainMax, step);\n  return values[values.length - 1] === domainMax ? values : values.concat(domainMax);\n}\n\n// Returns sorted data. If no sort keys are provided, data is returned unaltered.\nfunction sortData(dataset, sortKey, sortOrder) {\n  if (sortOrder === void 0) {\n    sortOrder = \"ascending\";\n  }\n  if (!sortKey) {\n    return dataset;\n  }\n\n  // Ensures previous VictoryLine api for sortKey prop stays consistent\n  let formattedSortKey = sortKey;\n  if (sortKey === \"x\" || sortKey === \"y\") {\n    formattedSortKey = `_${sortKey}`;\n  }\n  const order = sortOrder === \"ascending\" ? \"asc\" : \"desc\";\n  return _orderBy(dataset, formattedSortKey, order);\n}\n\n// This method will remove data points that break certain scales. (log scale only)\nfunction cleanData(dataset, props) {\n  const smallNumber = 1 / Number.MAX_SAFE_INTEGER;\n  const scaleType = {\n    x: Scale.getScaleType(props, \"x\"),\n    y: Scale.getScaleType(props, \"y\")\n  };\n  if (scaleType.x !== \"log\" && scaleType.y !== \"log\") {\n    return dataset;\n  }\n  const rules = (datum, axis) => {\n    return scaleType[axis] === \"log\" ? datum[`_${axis}`] !== 0 : true;\n  };\n  const sanitize = datum => {\n    const _x = rules(datum, \"x\") ? datum._x : smallNumber;\n    const _y = rules(datum, \"y\") ? datum._y : smallNumber;\n    const _y0 = rules(datum, \"y0\") ? datum._y0 : smallNumber;\n    return Object.assign({}, datum, {\n      _x,\n      _y,\n      _y0\n    });\n  };\n  return dataset.map(datum => {\n    if (rules(datum, \"x\") && rules(datum, \"y\") && rules(datum, \"y0\")) {\n      return datum;\n    }\n    return sanitize(datum);\n  });\n}\n\n// Returns a data accessor given an eventKey prop\nfunction getEventKey(key) {\n  // creates a data accessor function\n  // given a property key, path, array index, or null for identity.\n  if (Helpers.isFunction(key)) {\n    return key;\n  } else if (key === null || key === undefined) {\n    return () => undefined;\n  }\n  // otherwise, assume it is an array index, property key or path (_.property handles all three)\n  return _property(key);\n}\n\n// Returns data with an eventKey prop added to each datum\nfunction addEventKeys(props, data) {\n  const hasEventKeyAccessor = !!props.eventKey;\n  const eventKeyAccessor = getEventKey(props.eventKey);\n  return data.map((datum, index) => {\n    if (datum.eventKey !== undefined) {\n      return datum;\n    } else if (hasEventKeyAccessor) {\n      const eventKey = eventKeyAccessor(datum, index);\n      return eventKey !== undefined ? Object.assign({\n        eventKey\n      }, datum) : datum;\n    }\n    return datum;\n  });\n}\n\n// Exported Functions\n\n// This method will remove data points that fall outside of the desired domain (non-continuous charts only)\nexport function formatDataFromDomain(dataset, domain, defaultBaseline) {\n  const exists = val => val !== undefined;\n  const minDomainX = Collection.getMinValue(domain.x);\n  const maxDomainX = Collection.getMaxValue(domain.x);\n  const minDomainY = Collection.getMinValue(domain.y);\n  const maxDomainY = Collection.getMaxValue(domain.y);\n  const underMin = min => val => exists(val) && val < min;\n  const overMax = max => val => exists(val) && val > max;\n  const isUnderMinX = underMin(minDomainX);\n  const isUnderMinY = underMin(minDomainY);\n  const isOverMaxX = overMax(maxDomainX);\n  const isOverMaxY = overMax(maxDomainY);\n\n  // eslint-disable-next-line complexity\n  return dataset.map(datum => {\n    let {\n      _x,\n      _y,\n      _y0,\n      _y1\n    } = datum;\n\n    // single x point less than min domain\n    if (isUnderMinX(_x) || isOverMaxX(_x)) _x = null;\n    const baseline = exists(_y0) ? _y0 : defaultBaseline;\n    const value = exists(_y1) ? _y1 : _y;\n    if (!exists(value)) return datum;\n\n    // value only and less than min domain or greater than max domain\n    if (!exists(baseline) && (isUnderMinY(value) || isOverMaxY(value))) _y = null;\n\n    // baseline and value are both less than min domain or both greater than max domain\n    if (isUnderMinY(baseline) && isUnderMinY(value) || isOverMaxY(baseline) && isOverMaxY(value)) _y = _y0 = _y1 = null;\n\n    // baseline and value with only baseline below min, set baseline to minDomainY\n    if (isUnderMinY(baseline) && !isUnderMinY(value)) _y0 = minDomainY;\n    // baseline and value with only baseline above max, set baseline to maxDomainY\n    if (isOverMaxY(baseline) && !isOverMaxY(value)) _y0 = maxDomainY;\n    return Object.assign({}, datum, _omitBy({\n      _x,\n      _y,\n      _y0,\n      _y1\n    }, _isUndefined));\n  });\n}\n\n/**\n * Returns an object mapping string data to numeric data\n * @param {Object} props: the props object\n * @param {String} axis: the current axis\n * @returns {Object} an object mapping string data to numeric data\n */\nexport function createStringMap(props, axis) {\n  const stringsFromAxes = getStringsFromAxes(props, axis);\n  const stringsFromCategories = getStringsFromCategories(props, axis);\n  const stringsFromData = getStringsFromData(props, axis);\n  const allStrings = _uniq([...stringsFromAxes, ...stringsFromCategories, ...stringsFromData]);\n  return allStrings.length === 0 ? null : allStrings.reduce((memo, string, index) => {\n    memo[string] = index + 1;\n    return memo;\n  }, {});\n}\n\n/**\n * Reduces the size of a data array, such that it is <= maxPoints.\n * @param {Array} data: an array of data; must be sorted\n * @param {Number} maxPoints: maximum number of data points to return\n * @param {Number} startingIndex: the index of the data[0] *in the entire dataset*; this function\n                   assumes `data` param is a subset of larger dataset that has been zoommed\n  * @returns {Array} an array of data, a subset of data param\n  */\nexport function downsample(data, maxPoints, startingIndex) {\n  if (startingIndex === void 0) {\n    startingIndex = 0;\n  }\n  // ensures that the downampling of data while zooming looks good.\n  const dataLength = getLength(data);\n  if (dataLength > maxPoints) {\n    // limit k to powers of 2, e.g. 64, 128, 256\n    // so that the same points will be chosen reliably, reducing flicker on zoom\n    const k = Math.pow(2, Math.ceil(Math.log2(dataLength / maxPoints)));\n    return data.filter(\n    // ensure modulo is always calculated from same reference: i + startingIndex\n    (d, i) => (i + startingIndex) % k === 0);\n  }\n  return data;\n}\n\n/**\n * Returns formatted data. Data accessors are applied, and string values are replaced.\n * @param {Array} dataset: the original domain\n * @param {Object} props: the props object\n * @param {Array} expectedKeys: an array of expected data keys\n * @returns {Array} the formatted data\n */\nexport function formatData(dataset, props, expectedKeys) {\n  const isArrayOrIterable = Array.isArray(dataset) || Immutable.isIterable(dataset);\n  if (!isArrayOrIterable || getLength(dataset) < 1) {\n    return [];\n  }\n  const defaultKeys = [\"x\", \"y\", \"y0\"];\n  // TODO: We shouldnâ€™t mutate the expectedKeys param here,\n  // but we need to figure out why changing it causes regressions in tests.\n  // eslint-disable-next-line no-param-reassign\n  expectedKeys = Array.isArray(expectedKeys) ? expectedKeys : defaultKeys;\n  const createAccessor = name => {\n    return Helpers.createAccessor(props[name] !== undefined ? props[name] : name);\n  };\n  const accessor = expectedKeys.reduce((memo, type) => {\n    memo[type] = createAccessor(type);\n    return memo;\n  }, {});\n  const preformattedData = _isEqual(expectedKeys, defaultKeys) && props.x === \"_x\" && props.y === \"_y\" && props.y0 === \"_y0\";\n  let stringMap;\n  if (preformattedData === false) {\n    // stringMap is not required if the data is preformatted\n    stringMap = {\n      x: expectedKeys.indexOf(\"x\") !== -1 ? createStringMap(props, \"x\") : undefined,\n      y: expectedKeys.indexOf(\"y\") !== -1 ? createStringMap(props, \"y\") : undefined,\n      y0: expectedKeys.indexOf(\"y0\") !== -1 ? createStringMap(props, \"y\") : undefined\n    };\n  }\n  const data = preformattedData ? dataset : dataset.reduce((dataArr, datum, index) => {\n    // eslint-disable-line complexity\n    const parsedDatum = parseDatum(datum);\n    const fallbackValues = {\n      x: index,\n      y: parsedDatum\n    };\n    const processedValues = expectedKeys.reduce((memo, type) => {\n      const processedValue = accessor[type](parsedDatum);\n      const value = processedValue !== undefined ? processedValue : fallbackValues[type];\n      if (value !== undefined) {\n        if (typeof value === \"string\" && stringMap[type]) {\n          memo[`${type}Name`] = value;\n          memo[`_${type}`] = stringMap[type][value];\n        } else {\n          memo[`_${type}`] = value;\n        }\n      }\n      return memo;\n    }, {});\n    const formattedDatum = Object.assign({}, processedValues, parsedDatum);\n    if (!_isEmpty(formattedDatum)) {\n      dataArr.push(formattedDatum);\n    }\n    return dataArr;\n  }, []);\n  const sortedData = sortData(data, props.sortKey, props.sortOrder);\n  const cleanedData = cleanData(sortedData, props);\n  return addEventKeys(props, cleanedData);\n}\n\n/**\n * Returns generated x and y data based on domain and sample from props\n * @param {Object} props: the props object\n * @returns {Array} an array of data\n */\nexport function generateData(props) {\n  const xValues = generateDataArray(props, \"x\");\n  const yValues = generateDataArray(props, \"y\");\n  const values = xValues.map((x, i) => {\n    return {\n      x,\n      y: yValues[i]\n    };\n  });\n  return values;\n}\n\n/**\n * Returns an array of categories for a given axis\n * @param {Object} props: the props object\n * @param {String} axis: the current axis\n * @returns {Array} an array of categories\n */\nexport function getCategories(props, axis) {\n  return props.categories && !Array.isArray(props.categories) ? props.categories[axis] : props.categories;\n}\n\n/**\n * Returns an array of formatted data\n * @param {Object} props: the props object\n * @returns {Array} an array of data\n */\nexport function getData(props) {\n  return props.data ? formatData(props.data, props) : formatData(generateData(props), props);\n}\n\n/**\n * Returns an array of strings from axis tickValues for a given axis\n * @param {Object} props: the props object\n * @param {String} axis: the current axis\n * @returns {Array} an array of strings\n */\nexport function getStringsFromAxes(props, axis) {\n  const {\n    tickValues,\n    tickFormat\n  } = props;\n  let tickValueArray;\n  if (!tickValues || !Array.isArray(tickValues) && !tickValues[axis]) {\n    tickValueArray = tickFormat && Array.isArray(tickFormat) ? tickFormat : [];\n  } else {\n    tickValueArray = tickValues[axis] || tickValues;\n  }\n  return tickValueArray.filter(val => typeof val === \"string\");\n}\n\n/**\n * Returns an array of strings from categories for a given axis\n * @param {Object} props: the props object\n * @param {String} axis: the current axis\n * @returns {Array} an array of strings\n */\nexport function getStringsFromCategories(props, axis) {\n  if (!props.categories) {\n    return [];\n  }\n  const categories = getCategories(props, axis);\n  const categoryStrings = categories && categories.filter(val => typeof val === \"string\");\n  return categoryStrings ? Collection.removeUndefined(categoryStrings) : [];\n}\n\n/**\n * Returns an array of strings from data\n * @param {Object} props: the props object\n * @param {String} axis: the current axis\n * @returns {Array} an array of strings\n */\nexport function getStringsFromData(props, axis) {\n  const isArrayOrIterable = Array.isArray(props.data) || Immutable.isIterable(props.data);\n  if (!isArrayOrIterable) {\n    return [];\n  }\n  const key = props[axis] === undefined ? axis : props[axis];\n  const accessor = Helpers.createAccessor(key);\n\n  // support immutable data\n  const data = props.data.reduce((memo, d) => {\n    memo.push(parseDatum(d));\n    return memo;\n  }, []);\n  const sortedData = sortData(data, props.sortKey, props.sortOrder);\n  const dataStrings = sortedData.reduce((dataArr, datum) => {\n    const parsedDatum = parseDatum(datum);\n    dataArr.push(accessor(parsedDatum));\n    return dataArr;\n  }, []).filter(datum => typeof datum === \"string\");\n\n  // return a unique set of strings\n  return dataStrings.reduce((prev, curr) => {\n    if (curr !== undefined && curr !== null && prev.indexOf(curr) === -1) {\n      prev.push(curr);\n    }\n    return prev;\n  }, []);\n}\n\n/**\n * Checks whether a given component can be used to calculate data\n * @param {Component} component: a React component instance\n * @returns {Boolean} Returns true if the given component has a role included in the whitelist\n */\nexport function isDataComponent(component) {\n  const getRole = child => {\n    return child && child.type ? child.type.role : \"\";\n  };\n  let role = getRole(component);\n  if (role === \"portal\") {\n    const children = React.Children.toArray(component.props.children);\n    role = children.length ? getRole(children[0]) : \"\";\n  }\n  const whitelist = [\"area\", \"bar\", \"boxplot\", \"candlestick\", \"errorbar\", \"group\", \"histogram\", \"line\", \"pie\", \"scatter\", \"stack\", \"voronoi\"];\n  return whitelist.includes(role);\n}","map":{"version":3,"names":["_omitBy","_isUndefined","_isEqual","_isEmpty","_orderBy","_property","_isPlainObject","_uniq","React","Helpers","Collection","Scale","Immutable","parseDatum","datum","immutableDatumWhitelist","errorX","errorY","isImmutable","shallowToJS","getLength","data","isIterable","size","length","generateDataArray","props","axis","propsDomain","domain","getBaseScale","samples","domainMax","Math","max","domainMin","min","step","values","range","concat","sortData","dataset","sortKey","sortOrder","formattedSortKey","order","cleanData","smallNumber","Number","MAX_SAFE_INTEGER","scaleType","x","getScaleType","y","rules","sanitize","_x","_y","_y0","Object","assign","map","getEventKey","key","isFunction","undefined","addEventKeys","hasEventKeyAccessor","eventKey","eventKeyAccessor","index","formatDataFromDomain","defaultBaseline","exists","val","minDomainX","getMinValue","maxDomainX","getMaxValue","minDomainY","maxDomainY","underMin","overMax","isUnderMinX","isUnderMinY","isOverMaxX","isOverMaxY","_y1","baseline","value","createStringMap","stringsFromAxes","getStringsFromAxes","stringsFromCategories","getStringsFromCategories","stringsFromData","getStringsFromData","allStrings","reduce","memo","string","downsample","maxPoints","startingIndex","dataLength","k","pow","ceil","log2","filter","d","i","formatData","expectedKeys","isArrayOrIterable","Array","isArray","defaultKeys","createAccessor","name","accessor","type","preformattedData","y0","stringMap","indexOf","dataArr","parsedDatum","fallbackValues","processedValues","processedValue","formattedDatum","push","sortedData","cleanedData","generateData","xValues","yValues","getCategories","categories","getData","tickValues","tickFormat","tickValueArray","categoryStrings","removeUndefined","dataStrings","prev","curr","isDataComponent","component","getRole","child","role","children","Children","toArray","whitelist","includes"],"sources":["/Users/anjalichaturvedi/GitHub/brew-bridge-dashboard/website/node_modules/victory-core/es/victory-util/data.js"],"sourcesContent":["import _omitBy from \"lodash/omitBy\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport _isEqual from \"lodash/isEqual\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _orderBy from \"lodash/orderBy\";\nimport _property from \"lodash/property\";\nimport _isPlainObject from \"lodash/isPlainObject\";\nimport _uniq from \"lodash/uniq\";\n/* eslint-disable no-use-before-define */\nimport React from \"react\";\nimport * as Helpers from \"./helpers\";\nimport * as Collection from \"./collection\";\nimport * as Scale from \"./scale\";\nimport * as Immutable from \"./immutable\";\n\n// Private Functions\n\nfunction parseDatum(datum) {\n  const immutableDatumWhitelist = {\n    errorX: true,\n    errorY: true\n  };\n  return Immutable.isImmutable(datum) ? Immutable.shallowToJS(datum, immutableDatumWhitelist) : datum;\n}\nfunction getLength(data) {\n  return Immutable.isIterable(data) ? data.size : data.length;\n}\n\n// Returns generated data for a given axis based on domain and sample from props\nfunction generateDataArray(props, axis) {\n  const propsDomain = _isPlainObject(props.domain) ? props.domain[axis] : props.domain;\n  const domain = propsDomain || Scale.getBaseScale(props, axis).domain();\n  const samples = props.samples || 1;\n  const domainMax = Math.max(...domain);\n  const domainMin = Math.min(...domain);\n  const step = (domainMax - domainMin) / samples;\n  const values = Helpers.range(domainMin, domainMax, step);\n  return values[values.length - 1] === domainMax ? values : values.concat(domainMax);\n}\n\n// Returns sorted data. If no sort keys are provided, data is returned unaltered.\nfunction sortData(dataset, sortKey, sortOrder) {\n  if (sortOrder === void 0) {\n    sortOrder = \"ascending\";\n  }\n  if (!sortKey) {\n    return dataset;\n  }\n\n  // Ensures previous VictoryLine api for sortKey prop stays consistent\n  let formattedSortKey = sortKey;\n  if (sortKey === \"x\" || sortKey === \"y\") {\n    formattedSortKey = `_${sortKey}`;\n  }\n  const order = sortOrder === \"ascending\" ? \"asc\" : \"desc\";\n  return _orderBy(dataset, formattedSortKey, order);\n}\n\n// This method will remove data points that break certain scales. (log scale only)\nfunction cleanData(dataset, props) {\n  const smallNumber = 1 / Number.MAX_SAFE_INTEGER;\n  const scaleType = {\n    x: Scale.getScaleType(props, \"x\"),\n    y: Scale.getScaleType(props, \"y\")\n  };\n  if (scaleType.x !== \"log\" && scaleType.y !== \"log\") {\n    return dataset;\n  }\n  const rules = (datum, axis) => {\n    return scaleType[axis] === \"log\" ? datum[`_${axis}`] !== 0 : true;\n  };\n  const sanitize = datum => {\n    const _x = rules(datum, \"x\") ? datum._x : smallNumber;\n    const _y = rules(datum, \"y\") ? datum._y : smallNumber;\n    const _y0 = rules(datum, \"y0\") ? datum._y0 : smallNumber;\n    return Object.assign({}, datum, {\n      _x,\n      _y,\n      _y0\n    });\n  };\n  return dataset.map(datum => {\n    if (rules(datum, \"x\") && rules(datum, \"y\") && rules(datum, \"y0\")) {\n      return datum;\n    }\n    return sanitize(datum);\n  });\n}\n\n// Returns a data accessor given an eventKey prop\nfunction getEventKey(key) {\n  // creates a data accessor function\n  // given a property key, path, array index, or null for identity.\n  if (Helpers.isFunction(key)) {\n    return key;\n  } else if (key === null || key === undefined) {\n    return () => undefined;\n  }\n  // otherwise, assume it is an array index, property key or path (_.property handles all three)\n  return _property(key);\n}\n\n// Returns data with an eventKey prop added to each datum\nfunction addEventKeys(props, data) {\n  const hasEventKeyAccessor = !!props.eventKey;\n  const eventKeyAccessor = getEventKey(props.eventKey);\n  return data.map((datum, index) => {\n    if (datum.eventKey !== undefined) {\n      return datum;\n    } else if (hasEventKeyAccessor) {\n      const eventKey = eventKeyAccessor(datum, index);\n      return eventKey !== undefined ? Object.assign({\n        eventKey\n      }, datum) : datum;\n    }\n    return datum;\n  });\n}\n\n// Exported Functions\n\n// This method will remove data points that fall outside of the desired domain (non-continuous charts only)\nexport function formatDataFromDomain(dataset, domain, defaultBaseline) {\n  const exists = val => val !== undefined;\n  const minDomainX = Collection.getMinValue(domain.x);\n  const maxDomainX = Collection.getMaxValue(domain.x);\n  const minDomainY = Collection.getMinValue(domain.y);\n  const maxDomainY = Collection.getMaxValue(domain.y);\n  const underMin = min => val => exists(val) && val < min;\n  const overMax = max => val => exists(val) && val > max;\n  const isUnderMinX = underMin(minDomainX);\n  const isUnderMinY = underMin(minDomainY);\n  const isOverMaxX = overMax(maxDomainX);\n  const isOverMaxY = overMax(maxDomainY);\n\n  // eslint-disable-next-line complexity\n  return dataset.map(datum => {\n    let {\n      _x,\n      _y,\n      _y0,\n      _y1\n    } = datum;\n\n    // single x point less than min domain\n    if (isUnderMinX(_x) || isOverMaxX(_x)) _x = null;\n    const baseline = exists(_y0) ? _y0 : defaultBaseline;\n    const value = exists(_y1) ? _y1 : _y;\n    if (!exists(value)) return datum;\n\n    // value only and less than min domain or greater than max domain\n    if (!exists(baseline) && (isUnderMinY(value) || isOverMaxY(value))) _y = null;\n\n    // baseline and value are both less than min domain or both greater than max domain\n    if (isUnderMinY(baseline) && isUnderMinY(value) || isOverMaxY(baseline) && isOverMaxY(value)) _y = _y0 = _y1 = null;\n\n    // baseline and value with only baseline below min, set baseline to minDomainY\n    if (isUnderMinY(baseline) && !isUnderMinY(value)) _y0 = minDomainY;\n    // baseline and value with only baseline above max, set baseline to maxDomainY\n    if (isOverMaxY(baseline) && !isOverMaxY(value)) _y0 = maxDomainY;\n    return Object.assign({}, datum, _omitBy({\n      _x,\n      _y,\n      _y0,\n      _y1\n    }, _isUndefined));\n  });\n}\n\n/**\n * Returns an object mapping string data to numeric data\n * @param {Object} props: the props object\n * @param {String} axis: the current axis\n * @returns {Object} an object mapping string data to numeric data\n */\nexport function createStringMap(props, axis) {\n  const stringsFromAxes = getStringsFromAxes(props, axis);\n  const stringsFromCategories = getStringsFromCategories(props, axis);\n  const stringsFromData = getStringsFromData(props, axis);\n  const allStrings = _uniq([...stringsFromAxes, ...stringsFromCategories, ...stringsFromData]);\n  return allStrings.length === 0 ? null : allStrings.reduce((memo, string, index) => {\n    memo[string] = index + 1;\n    return memo;\n  }, {});\n}\n\n/**\n * Reduces the size of a data array, such that it is <= maxPoints.\n * @param {Array} data: an array of data; must be sorted\n * @param {Number} maxPoints: maximum number of data points to return\n * @param {Number} startingIndex: the index of the data[0] *in the entire dataset*; this function\n                   assumes `data` param is a subset of larger dataset that has been zoommed\n  * @returns {Array} an array of data, a subset of data param\n  */\nexport function downsample(data, maxPoints, startingIndex) {\n  if (startingIndex === void 0) {\n    startingIndex = 0;\n  }\n  // ensures that the downampling of data while zooming looks good.\n  const dataLength = getLength(data);\n  if (dataLength > maxPoints) {\n    // limit k to powers of 2, e.g. 64, 128, 256\n    // so that the same points will be chosen reliably, reducing flicker on zoom\n    const k = Math.pow(2, Math.ceil(Math.log2(dataLength / maxPoints)));\n    return data.filter(\n    // ensure modulo is always calculated from same reference: i + startingIndex\n    (d, i) => (i + startingIndex) % k === 0);\n  }\n  return data;\n}\n\n/**\n * Returns formatted data. Data accessors are applied, and string values are replaced.\n * @param {Array} dataset: the original domain\n * @param {Object} props: the props object\n * @param {Array} expectedKeys: an array of expected data keys\n * @returns {Array} the formatted data\n */\nexport function formatData(dataset, props, expectedKeys) {\n  const isArrayOrIterable = Array.isArray(dataset) || Immutable.isIterable(dataset);\n  if (!isArrayOrIterable || getLength(dataset) < 1) {\n    return [];\n  }\n  const defaultKeys = [\"x\", \"y\", \"y0\"];\n  // TODO: We shouldnâ€™t mutate the expectedKeys param here,\n  // but we need to figure out why changing it causes regressions in tests.\n  // eslint-disable-next-line no-param-reassign\n  expectedKeys = Array.isArray(expectedKeys) ? expectedKeys : defaultKeys;\n  const createAccessor = name => {\n    return Helpers.createAccessor(props[name] !== undefined ? props[name] : name);\n  };\n  const accessor = expectedKeys.reduce((memo, type) => {\n    memo[type] = createAccessor(type);\n    return memo;\n  }, {});\n  const preformattedData = _isEqual(expectedKeys, defaultKeys) && props.x === \"_x\" && props.y === \"_y\" && props.y0 === \"_y0\";\n  let stringMap;\n  if (preformattedData === false) {\n    // stringMap is not required if the data is preformatted\n    stringMap = {\n      x: expectedKeys.indexOf(\"x\") !== -1 ? createStringMap(props, \"x\") : undefined,\n      y: expectedKeys.indexOf(\"y\") !== -1 ? createStringMap(props, \"y\") : undefined,\n      y0: expectedKeys.indexOf(\"y0\") !== -1 ? createStringMap(props, \"y\") : undefined\n    };\n  }\n  const data = preformattedData ? dataset : dataset.reduce((dataArr, datum, index) => {\n    // eslint-disable-line complexity\n    const parsedDatum = parseDatum(datum);\n    const fallbackValues = {\n      x: index,\n      y: parsedDatum\n    };\n    const processedValues = expectedKeys.reduce((memo, type) => {\n      const processedValue = accessor[type](parsedDatum);\n      const value = processedValue !== undefined ? processedValue : fallbackValues[type];\n      if (value !== undefined) {\n        if (typeof value === \"string\" && stringMap[type]) {\n          memo[`${type}Name`] = value;\n          memo[`_${type}`] = stringMap[type][value];\n        } else {\n          memo[`_${type}`] = value;\n        }\n      }\n      return memo;\n    }, {});\n    const formattedDatum = Object.assign({}, processedValues, parsedDatum);\n    if (!_isEmpty(formattedDatum)) {\n      dataArr.push(formattedDatum);\n    }\n    return dataArr;\n  }, []);\n  const sortedData = sortData(data, props.sortKey, props.sortOrder);\n  const cleanedData = cleanData(sortedData, props);\n  return addEventKeys(props, cleanedData);\n}\n\n/**\n * Returns generated x and y data based on domain and sample from props\n * @param {Object} props: the props object\n * @returns {Array} an array of data\n */\nexport function generateData(props) {\n  const xValues = generateDataArray(props, \"x\");\n  const yValues = generateDataArray(props, \"y\");\n  const values = xValues.map((x, i) => {\n    return {\n      x,\n      y: yValues[i]\n    };\n  });\n  return values;\n}\n\n/**\n * Returns an array of categories for a given axis\n * @param {Object} props: the props object\n * @param {String} axis: the current axis\n * @returns {Array} an array of categories\n */\nexport function getCategories(props, axis) {\n  return props.categories && !Array.isArray(props.categories) ? props.categories[axis] : props.categories;\n}\n\n/**\n * Returns an array of formatted data\n * @param {Object} props: the props object\n * @returns {Array} an array of data\n */\nexport function getData(props) {\n  return props.data ? formatData(props.data, props) : formatData(generateData(props), props);\n}\n\n/**\n * Returns an array of strings from axis tickValues for a given axis\n * @param {Object} props: the props object\n * @param {String} axis: the current axis\n * @returns {Array} an array of strings\n */\nexport function getStringsFromAxes(props, axis) {\n  const {\n    tickValues,\n    tickFormat\n  } = props;\n  let tickValueArray;\n  if (!tickValues || !Array.isArray(tickValues) && !tickValues[axis]) {\n    tickValueArray = tickFormat && Array.isArray(tickFormat) ? tickFormat : [];\n  } else {\n    tickValueArray = tickValues[axis] || tickValues;\n  }\n  return tickValueArray.filter(val => typeof val === \"string\");\n}\n\n/**\n * Returns an array of strings from categories for a given axis\n * @param {Object} props: the props object\n * @param {String} axis: the current axis\n * @returns {Array} an array of strings\n */\nexport function getStringsFromCategories(props, axis) {\n  if (!props.categories) {\n    return [];\n  }\n  const categories = getCategories(props, axis);\n  const categoryStrings = categories && categories.filter(val => typeof val === \"string\");\n  return categoryStrings ? Collection.removeUndefined(categoryStrings) : [];\n}\n\n/**\n * Returns an array of strings from data\n * @param {Object} props: the props object\n * @param {String} axis: the current axis\n * @returns {Array} an array of strings\n */\nexport function getStringsFromData(props, axis) {\n  const isArrayOrIterable = Array.isArray(props.data) || Immutable.isIterable(props.data);\n  if (!isArrayOrIterable) {\n    return [];\n  }\n  const key = props[axis] === undefined ? axis : props[axis];\n  const accessor = Helpers.createAccessor(key);\n\n  // support immutable data\n  const data = props.data.reduce((memo, d) => {\n    memo.push(parseDatum(d));\n    return memo;\n  }, []);\n  const sortedData = sortData(data, props.sortKey, props.sortOrder);\n  const dataStrings = sortedData.reduce((dataArr, datum) => {\n    const parsedDatum = parseDatum(datum);\n    dataArr.push(accessor(parsedDatum));\n    return dataArr;\n  }, []).filter(datum => typeof datum === \"string\");\n\n  // return a unique set of strings\n  return dataStrings.reduce((prev, curr) => {\n    if (curr !== undefined && curr !== null && prev.indexOf(curr) === -1) {\n      prev.push(curr);\n    }\n    return prev;\n  }, []);\n}\n\n/**\n * Checks whether a given component can be used to calculate data\n * @param {Component} component: a React component instance\n * @returns {Boolean} Returns true if the given component has a role included in the whitelist\n */\nexport function isDataComponent(component) {\n  const getRole = child => {\n    return child && child.type ? child.type.role : \"\";\n  };\n  let role = getRole(component);\n  if (role === \"portal\") {\n    const children = React.Children.toArray(component.props.children);\n    role = children.length ? getRole(children[0]) : \"\";\n  }\n  const whitelist = [\"area\", \"bar\", \"boxplot\", \"candlestick\", \"errorbar\", \"group\", \"histogram\", \"line\", \"pie\", \"scatter\", \"stack\", \"voronoi\"];\n  return whitelist.includes(role);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}